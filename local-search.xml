<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2024/09/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="策略模式（案例：四则运算-）"><a href="#策略模式（案例：四则运算-）" class="headerlink" title="策略模式（案例：四则运算 +  -  *  &#x2F;  ）"></a>策略模式（案例：四则运算 +  -  *  &#x2F;  ）</h2><p>​策略模式（Strategy Pattern）是一种行为设计模式，用来定义一系列的算法，把它们一个个封装起来，并使它们可以相互替换。该模式使得算法可以独立于使用它的客户端而变化，也即算法可以独立于它们的上下文进行变化。策略模式是一种很常用的设计模式，广泛应用于需要从多种算法或业务规则中选择一种算法或规则的系统中。</p><h3 id="目的和优势："><a href="#目的和优势：" class="headerlink" title="目的和优势："></a>目的和优势：</h3><ol><li><strong>封装变化</strong>：将算法的变化封装在各个策略类中，而不是在使用算法的环境中。</li><li><strong>避免使用多重条件选择语句</strong>：策略模式提供了一种用条件语句选择所需算法的替代方法。</li><li><strong>易于扩展</strong>：添加一个新的策略只需实现一个接口即可，无需修改现有代码。</li><li><strong>符合开闭原则</strong>：系统可以在不修改原有代码的情况下引入新的算法。</li></ol><h3 id="结构组成："><a href="#结构组成：" class="headerlink" title="结构组成："></a>结构组成：</h3><p>策略模式主要包括三个角色：</p><ol><li><strong>环境类（Context）</strong>：用来操作策略的上下文环境，它是客户端使用策略的入口。</li><li><strong>抽象策略类（Strategy Interface）</strong>：定义所有支持的算法的公共接口。Context使用这个接口来调用某个Concrete Strategy定义的算法。</li><li><strong>具体策略类（Concrete Strategy）</strong>：实现策略接口，提供具体的算法实现。</li></ol><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ol><li><strong>需要在运行时选择算法的行为</strong>：当系统需要根据不同的情况使用不同的算法时，可以使用策略模式。例如，根据不同的支付方式选择不同的支付策略。</li><li><strong>避免使用大量的条件语句</strong>：如果在代码中使用大量的条件语句来选择不同的行为，可以考虑使用策略模式。策略模式可以将每种行为封装在单独的策略对象中，从而简化代码并提高可读性。</li><li><strong>算法的实现可能频繁变化</strong>：如果系统中的算法实现可能经常变化，而且这种变化不希望影响到客户端代码，可以使用策略模式。策略模式将算法的实现与客户端代码分离，使得可以轻松地添加、删除或替换策略而不影响客户端代码。</li><li><strong>需要通过继承或组合来扩展算法的行为</strong>：策略模式可以通过继承或组合来扩展算法的行为。通过定义新的策略对象，可以轻松地添加新的行为，而不影响现有的代码。</li></ol><p>总之，策略模式适用于需要在运行时选择算法的行为，并且希望通过封装算法和消除大量的条件语句来提高代码的可读性和可维护性的情况。</p><h4 id="抽象策略类："><a href="#抽象策略类：" class="headerlink" title="抽象策略类："></a>抽象策略类：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 抽象策略类</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br>     <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doOperation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>; <span class="hljs-comment">//算法的具体实现</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="具体策略类："><a href="#具体策略类：" class="headerlink" title="具体策略类："></a>具体策略类：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//加法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">addOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    int doOperation(int x,int y) &#123;<br>        <span class="hljs-keyword">return</span> x+y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//减法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">subOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x-y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//乘法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mulOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x*y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//除法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">divOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x/y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环境类："><a href="#环境类：" class="headerlink" title="环境类："></a>环境类：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//环境类  保存具体策略类的具体实例 并  提供一个方法调用具体策略的具体算法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationContext</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  Operation strategy; <span class="hljs-comment">//保存具体策略</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> x;  <span class="hljs-comment">//要进行运算的参数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> y;<span class="hljs-comment">//要进行运算的参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperationContext</span><span class="hljs-params">(Operation strategy,<span class="hljs-keyword">double</span> x,<span class="hljs-keyword">double</span> y)</span> </span>&#123;  <span class="hljs-comment">//构造方法</span><br>        <span class="hljs-keyword">this</span>.strategy = strategy;<br>        <span class="hljs-keyword">this</span>.x=x;<br>        <span class="hljs-keyword">this</span>.y=y;<br>    &#125;<br>    <span class="hljs-comment">//返回计算后的结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">executeOperation</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> strategy.<span class="hljs-title">doOperation</span><span class="hljs-params">(x,y)</span></span>;  <span class="hljs-comment">//策略中的具体算法，对数据进行具体计算</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端使用："><a href="#客户端使用：" class="headerlink" title="客户端使用："></a>客户端使用：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">app</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br><br>        OperationContext context;<br>        <span class="hljs-comment">//启用加法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> addOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;加法:x+y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到减法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> subOperationStrategy(),<span class="hljs-number">8.0</span>,<span class="hljs-number">4.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;减法:x-y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到乘法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> mulOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;乘法:x*y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到除法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> divOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;除法:x/y=&quot;</span>+context.executeOperation());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>职责链模式</title>
    <link href="/2024/09/11/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AF%B7%E5%81%87%E5%AE%A1%E6%89%B9%E6%9D%83%E9%99%90%EF%BC%89/"/>
    <url>/2024/09/11/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AF%B7%E5%81%87%E5%AE%A1%E6%89%B9%E6%9D%83%E9%99%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="职责链模式（案例：请假审批权限：小组长-经理-…-）"><a href="#职责链模式（案例：请假审批权限：小组长-经理-…-）" class="headerlink" title="职责链模式（案例：请假审批权限：小组长-&gt;经理-&gt;….）"></a>职责链模式（案例：请假审批权限：小组长-&gt;经理-&gt;….）</h2><p>​在软件设计中，职责链模式（Chain of Responsibility Pattern）是一种行为设计模式，用于将请求的发送者和接收者解耦。在Java中实现职责链模式通常涉及创建多个处理对象（handler），这些对象构成一条链，每个处理对象都有机会处理请求或将其传递给链中的下一个对象。</p><h3 id="职责链模式的核心组成部分："><a href="#职责链模式的核心组成部分：" class="headerlink" title="职责链模式的核心组成部分："></a>职责链模式的核心组成部分：</h3><ol><li><strong>处理器接口（Handler Interface）</strong>：定义了处理请求的方法。所有的具体处理器都必须实现这个接口。</li><li><strong>具体处理器（Concrete Handlers）</strong>：实现处理器接口的类，每个类都处理它能处理的请求，并决定是否将请求传递到链上的下一个处理器。</li><li><strong>客户端（Client）</strong>：启动请求传递到职责链的起点</li></ol><h4 id="1-创建处理器"><a href="#1-创建处理器" class="headerlink" title="1. 创建处理器"></a>1. 创建处理器</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Leader</span> supirior; <span class="hljs-comment">//上级领导  即职责链</span><br><br><span class="hljs-comment">//抽象方法  请假天数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">handleRequest</span>(int days);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br><span class="hljs-comment">// 即职责链       name:本人    supirior:上级领导</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Leader</span> supirior) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">supirior</span> = supirior;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSupirior</span>(<span class="hljs-params"><span class="hljs-title class_">Leader</span> supirior</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">supirior</span> = supirior;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span> <span class="hljs-title function_">getSupirior</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> supirior;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-定义具体处理器"><a href="#2-定义具体处理器" class="headerlink" title="2. 定义具体处理器"></a>2. 定义具体处理器</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//小组长处理</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Grouper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span></span>&#123;<br>    public <span class="hljs-type">Grouper</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">//请假的具体实现</span><br>    public void handleRequest(int days) &#123;<br>        <span class="hljs-keyword">if</span>(days &lt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">System</span>.out.println( <span class="hljs-string">&quot;小组长：&quot;</span>+<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;批准请假：&quot;</span>+days+<span class="hljs-string">&quot;天！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getSupirior()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//权限不够 则推给上级领导处理</span><br>                <span class="hljs-keyword">this</span>.getSupirior().handleRequest(  days );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;请假天数超过权限&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//经理处理</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span></span>&#123;<br>    public <span class="hljs-type">Manager</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">//请假的具体实现</span><br>    public void handleRequest(int days) &#123;<br>        <span class="hljs-keyword">if</span>(days &lt;= <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">System</span>.out.println( <span class="hljs-string">&quot;经理：&quot;</span>+<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;批准请假：&quot;</span>+days+<span class="hljs-string">&quot;天！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getSupirior()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//权限不够 则推给上级领导处理</span><br>                <span class="hljs-keyword">this</span>.getSupirior().handleRequest(  days );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;请假天数超过权限！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-客户端使用"><a href="#3-客户端使用" class="headerlink" title="3. 客户端使用"></a>3. 客户端使用</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">//开闭原则 ： 对修改关闭   对扩展开发</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> App &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//组装职责链</span><br>        Leader grouper <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Grouper(<span class="hljs-string">&quot;小组长张三&quot;</span>);<br>        <span class="hljs-comment">//小组长上加经理</span><br>        Leader manager <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Manager(<span class="hljs-string">&quot;经理李四&quot;</span>);<br>        grouper.setSupirior(manager);<br>        <span class="hljs-comment">//经理上加总经理</span><br>        <span class="hljs-operator">/*</span><br>        Leader generalManager <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> GeneralManager(<span class="hljs-string">&quot;总经理lili&quot;</span>);<br>        manager.setSupirior(generalManager);<br><br>        <span class="hljs-comment">//总经理上加老板</span><br>        Leader boss <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Boss(<span class="hljs-string">&quot;老板小明&quot;</span>);<br>        generalManager.setSupirior(boss);<br><span class="hljs-operator">*/</span><br><span class="hljs-comment">//请假3天</span><br>        grouper.handleRequest(<span class="hljs-number">3</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2024/09/11/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6)/"/>
    <url>/2024/09/11/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6)/</url>
    
    <content type="html"><![CDATA[<h2 id="观察者模式（案例：十进制转二进制、八进制、十六进制"><a href="#观察者模式（案例：十进制转二进制、八进制、十六进制" class="headerlink" title="观察者模式（案例：十进制转二进制、八进制、十六进制)"></a>观察者模式（案例：十进制转二进制、八进制、十六进制)</h2><p>​观察者模式是一种常用的设计模式，属于行为型模式。它允许一个对象（称为“主题”或“被观察者”）维持一系列依赖于它的对象（称为“观察者”），当主题的状态发生变化时，会自动通知所有观察者对象，使它们能够自动更新自己。</p><h3 id="观察者模式的组成："><a href="#观察者模式的组成：" class="headerlink" title="观察者模式的组成："></a>观察者模式的组成：</h3><ol><li><strong>Subject（主题）</strong> - 维护一组观察者，提供用于增加和删除观察者的方法。</li><li><strong>Observer（观察者）</strong> - 所有潜在的更新对象必须实现的接口。</li><li><strong>BinaryObserver（具体观察者，二进制）</strong> - 当接收到主题变化的通知时，执行相应的动作。</li><li><strong>OctalObserver（具体观察者，八进制）</strong> - 当接收到主题变化的通知时，执行相应的动作。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>当一个对象的改变需要同时改变其他对象，而且它不知道具体有哪些对象需要改变时。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这两者封装在独立的对象中以使它们可以各自独立地改变和复用。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//待观察的主题：  状态</span><br><span class="hljs-comment">//一旦主题中的状态发生变化， 就要通知所有观察者，你们要运行(   进制转换   )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> &#123;<br><br>    <span class="hljs-comment">//2 所有的转换器  观察的状态是state</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> state;  <span class="hljs-comment">//此属性可以是一个复杂的对象</span><br><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <span class="hljs-comment">//观察者（进制转换器）的集合</span><br><br>    <span class="hljs-comment">//1 将转换器保存到  转换器集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span>(<span class="hljs-params">Observer Observer</span>)</span>&#123;<br>        <span class="hljs-comment">//将观察者保存到集合中 （ 将观察者注册到主题中来  ）</span><br>        observers.<span class="hljs-keyword">add</span>(Observer);<br>    &#125;<br>    <span class="hljs-comment">//3 状态一发生变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> state</span>)</span>&#123;<br>        <span class="hljs-comment">//状态变化</span><br>        <span class="hljs-keyword">this</span>.state = state;<br>        <span class="hljs-comment">//通知观察者状态变了 ，请运算</span><br>        <span class="hljs-comment">//4  循环所有的转换器（观察者） ，调用转换器的转换方法 update() 输出对应的进制的值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;observers.size();i++)&#123;<br>            Observer observer = observers.<span class="hljs-keyword">get</span>(i); <span class="hljs-comment">//提取每个转换器（观察者）</span><br>            observer.update(); <span class="hljs-comment">//调用每个转换器（观察者）的转换方法</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getState</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> Subject subject;  <span class="hljs-comment">//待观察的主题</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span>; <span class="hljs-comment">//  转换方法</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pf">//二进制的转换器 （二进制的观察者）<br>public class BinaryObserver extends Observer&#123;<br><br>    public BinaryObserver(Subject subject) &#123;<br>        super.subject=subject;  //当前二进制的观察者观察了谁 （主题）<br>        subject.register( this  );//主题中也要知道谁 （观察者/转换器） 观察了自己<br>    &#125;<br><br>    @Override<br>    public void update() &#123;<br>        //转换开始 取出Subject中的<span class="hljs-keyword">state</span>，转为二进制<br>        int <span class="hljs-keyword">state</span> = super.subject.getState(); //先取出变化后的状态<br>        String str = Integer.<span class="hljs-keyword">to</span>BinaryString(<span class="hljs-keyword">state</span>);<br>        System.<span class="hljs-keyword">out</span>.println(  <span class="hljs-string">&quot;原始值：&quot;</span>+<span class="hljs-keyword">state</span>+<span class="hljs-string">&quot;转成二进制的结果为：&quot;</span>+str  );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">//八进制的转换器 （八进制的观察者）<br>public class OctalObserver extends Observer&#123;<br>    public OctalObserver(Subject subject) &#123;<br>        super.subject=subject;  //当前八进制的观察者观察了谁 （主题）<br>        subject.register( this  );//主题中也要知道谁 （观察者/转换器） 观察了自己<br>    &#125;<br><br>    @Override<br>    public void update() &#123;<br>        //转换开始 取出Subject中的<span class="hljs-keyword">state</span>，转为八进制<br>        int <span class="hljs-keyword">state</span> = super.subject.getState(); //先取出变化后的状态<br>        String str = Integer.<span class="hljs-keyword">to</span>OctalString( <span class="hljs-keyword">state</span> );<br>        System.<span class="hljs-keyword">out</span>.println(  <span class="hljs-string">&quot;原始值：&quot;</span>+<span class="hljs-keyword">state</span>+<span class="hljs-string">&quot;转成八进制的结果为：&quot;</span>+str  );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">//1 带观察者的主题</span><br>        <span class="hljs-title class_">Subject</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br><br>        <span class="hljs-comment">//2 创建一些观察者（转换器） 并注册这些观察者到主题中</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">OctalObserver</span>(  subject  );<span class="hljs-comment">//八进制</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryObserver</span>(  subject  );<span class="hljs-comment">//二进制</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HexObserver</span>( subject ); <span class="hljs-comment">//十六进制</span><br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;更改状态值：&quot;</span>);<br>        subject.<span class="hljs-title function_">setState</span>(  <span class="hljs-number">10</span>  );<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
