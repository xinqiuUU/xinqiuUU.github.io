<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/09/09/ActiveMQ/"/>
    <url>/2024/09/09/ActiveMQ/</url>
    
    <content type="html"><![CDATA[<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">消息中间件ActiveMQ</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">/contentImg/2222.png</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">spring</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">activemq</span><br></code></pre></td></tr></table></figure><h1 id="spring集成消息代理ActiveMQ"><a href="#spring集成消息代理ActiveMQ" class="headerlink" title="spring集成消息代理ActiveMQ"></a>spring集成消息代理ActiveMQ</h1><p>使用ActiveMQ可以实现可靠的异步消息传递，它是一个流行的开源消息代理（Message Broker），实现了JMS（Java Message Service）规范。下面是基本的步骤和示例，展示如何在Java应用程序中使用ActiveMQ。</p><h4 id="下载和安装ActiveMQ"><a href="#下载和安装ActiveMQ" class="headerlink" title="下载和安装ActiveMQ"></a>下载和安装ActiveMQ</h4><p>首先，需要下载和安装ActiveMQ。可以从官方网站下载最新版本的ActiveMQ：<a href="http://activemq.apache.org/">(https://activemq.apache.org/)</a>.</p><h4 id="启动ActiveMQ"><a href="#启动ActiveMQ" class="headerlink" title="启动ActiveMQ"></a>启动ActiveMQ</h4><p>安装完成后，通过命令行或启动脚本启动ActiveMQ。在命令行中导航到ActiveMQ安装目录的<code>bin</code>文件夹，然后执行以下命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">activemq <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>启动后可以在浏览器输入:<a href="http://127.0.0.1:8161/">http://127.0.0.1:8161/</a> 打开ActiveMQ的web控制台。</p><p>账户&#x2F;密码都是:admin</p><h4 id="停止-ActiveMQ-服务："><a href="#停止-ActiveMQ-服务：" class="headerlink" title="停止 ActiveMQ 服务："></a><strong>停止 ActiveMQ 服务</strong>：</h4><p>如果是在 Windows 系统上，可以进入 ActiveMQ 的安装目录的<code>bin</code>文件夹，然后执行以下命令：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">activemq stop<br></code></pre></td></tr></table></figure><h3 id="spring中集成ActiveMQ："><a href="#spring中集成ActiveMQ：" class="headerlink" title="spring中集成ActiveMQ："></a>spring中集成ActiveMQ：</h3><h4 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Core 和 Spring JMS 相关依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 版本号根据你的实际需求和Spring版本进行调整 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ActiveMQ 相关依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.activemq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activemq-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.18.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 版本号根据你的实际需求和ActiveMQ版本进行调整 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-comment">&lt;!--   Apache 的日志核心库     --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.17.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 根据需要选择合适的版本 --&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置类："><a href="#配置类：" class="headerlink" title="配置类："></a>配置类：</h4><p>JMS (Java Message Service) 支持两种主要的消息传递模式：</p><ol><li><strong>点对点（Queue）模式</strong>：<ul><li><strong>生产者</strong>将消息发送到一个<strong>队列</strong>。</li><li><strong>消费者</strong>从队列中接收消息。</li><li>消息被发送到一个特定的队列中，只能由一个消费者接收，确保消息的独占处理。</li></ul></li><li><strong>发布&#x2F;订阅（Topic）模式</strong>：<ul><li><strong>生产者</strong>将消息发布到一个<strong>主题</strong>。</li><li><strong>多个消费者</strong>可以订阅这个主题并接收消息。</li><li>消息被广播到所有订阅了该主题的消费者，确保消息的广播处理。</li></ul></li></ol><p>这两种模式各有不同的适用场景，根据需求选择合适的模式可以优化消息传递的效率和灵活性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jms.<span class="hljs-keyword">annotation</span>.EnableJms;<br><span class="hljs-keyword">import</span> org.springframework.jms.config.DefaultJmsListenerContainerFactory;<br><span class="hljs-keyword">import</span> org.springframework.jms.config.JmsListenerContainerFactory;<br><span class="hljs-keyword">import</span> org.springframework.jms.core.JmsTemplate;<br><span class="hljs-keyword">import</span> javax.jms.ConnectionFactory;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableJms</span> <span class="hljs-comment">//在 Spring 应用程序中启用 JMS（Java Message Service）相关的功能和配置</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;<span class="hljs-string">&quot;com.yc.zy.jms&quot;</span>&#125;)</span> <span class="hljs-comment">// 扫包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JmsConfig</span> &#123;<br><br>    <span class="hljs-comment">// 配置连接工厂</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConnectionFactory connectionFactory() &#123;<br>        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();<br>        connectionFactory.setBrokerURL(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<span class="hljs-comment">// ActiveMQ 代理地址</span><br>        <span class="hljs-keyword">return</span>  connectionFactory;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置 JmsTemplate jms模板：消息发送 消息接收  消息转换 连接和会话管理</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) &#123;<br>        JmsTemplate jmsTemplate =  new JmsTemplate();<br>        jmsTemplate.setConnectionFactory(connectionFactory);<br><span class="hljs-comment">//        jmsTemplate.setPubSubDomain(true); // 默认为 点对点（Queue）模式  设置为true表示发布/订阅（Topic）模式</span><br>        <span class="hljs-keyword">return</span> jmsTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置消息监听器容器工厂</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JmsListenerContainerFactory&lt;?&gt; jmsListenerContainerFactory(ConnectionFactory connectionFactory) &#123;<br>        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();<br>        factory.setConnectionFactory(connectionFactory);<br><span class="hljs-comment">//        factory.setPubSubDomain(true); // 默认为点对点（Queue）模式  设置为true表示发布/订阅（Topic）模式</span><br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息生产者："><a href="#消息生产者：" class="headerlink" title="消息生产者："></a>消息生产者：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Autowired</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">jms</span>.<span class="hljs-property">core</span>.<span class="hljs-property">JmsTemplate</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageProducer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">JmsTemplate</span> jmsTemplate; <span class="hljs-comment">// 注入 JmsTemplate 实例</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> message</span>) &#123;<br>        jmsTemplate.<span class="hljs-title function_">convertAndSend</span>(<span class="hljs-string">&quot;myQueue&quot;</span>, message);<span class="hljs-comment">// 发送消息到队列</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;发送的消息为: &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息消费者："><a href="#消息消费者：" class="headerlink" title="消息消费者："></a>消息消费者：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.springframework.jms.<span class="hljs-keyword">annotation</span>.JmsListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@JmsListener(destination = <span class="hljs-string">&quot;myQueue&quot;</span>)</span> <span class="hljs-comment">// 监听myQueue消息队列</span><br>    <span class="hljs-keyword">public</span> void receiveMessage(String message) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;用户接收到的消息: &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        ApplicationContext ac = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AnnotationConfigApplicationContext</span>(JmsConfig.<span class="hljs-keyword">class</span>);<br>        MessageProducer mp = (MessageProducer) ac.<span class="hljs-built_in">getBean</span>(<span class="hljs-string">&quot;messageProducer&quot;</span>);<br>        mp.<span class="hljs-built_in">sendMessage</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>集成 ActiveMQ 与 Spring 结合使用，可以显著提高消息处理的效率和简化开发过程，同时利用 Spring 提供的功能增强应用程序的灵活性和可靠性。这种集成不仅提升了消息传递的功能，还简化了配置和管理。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/08/hello-world/"/>
    <url>/2024/09/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
