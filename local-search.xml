<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>漏斗算法与令牌桶算法</title>
    <link href="/2024/09/17/%E6%BC%8F%E6%96%97%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/"/>
    <url>/2024/09/17/%E6%BC%8F%E6%96%97%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="漏斗算法与令牌桶算法"><a href="#漏斗算法与令牌桶算法" class="headerlink" title="漏斗算法与令牌桶算法"></a>漏斗算法与令牌桶算法</h2><p>在网络流量控制和限速机制中，<strong>漏斗算法（Leaky Bucket Algorithm）</strong> 和 <strong>令牌桶算法（Token Bucket Algorithm）</strong> 是两种常用的流量控制算法。它们各自具有独特的特性和应用场景。本文将详细讲解这两种算法的原理、优缺点及应用，并提供对应的 Java 实现示例。</p><hr><h3 id="一、漏斗算法（Leaky-Bucket-Algorithm）"><a href="#一、漏斗算法（Leaky-Bucket-Algorithm）" class="headerlink" title="一、漏斗算法（Leaky Bucket Algorithm）"></a>一、漏斗算法（Leaky Bucket Algorithm）</h3><h4 id="1-1-漏斗算法的基本原理"><a href="#1-1-漏斗算法的基本原理" class="headerlink" title="1.1 漏斗算法的基本原理"></a>1.1 漏斗算法的基本原理</h4><p>漏斗算法的设计灵感来源于现实中的漏斗。水滴通过漏斗的顶部进入，水通过漏斗底部的小孔匀速流出。漏斗算法的主要目标是限制数据传输的速率，使得数据输出保持恒定。</p><p>在网络流量控制中，漏斗算法的工作机制如下：</p><ol><li>当数据包到达时，它会被存储在“漏斗”中。</li><li>数据以固定的速率从漏斗中“流出”，即输出到网络。</li><li>如果数据包的到达速率超过了漏斗的处理能力，多余的数据包会被丢弃。</li></ol><h4 id="1-2-漏斗算法的优缺点"><a href="#1-2-漏斗算法的优缺点" class="headerlink" title="1.2 漏斗算法的优缺点"></a>1.2 漏斗算法的优缺点</h4><p><strong>优点：</strong></p><ul><li>实现简单。</li><li>能有效控制数据的平均传输速率，保证流量的平稳输出。</li></ul><p><strong>缺点：</strong></p><ul><li>对突发数据流的处理不佳。一旦输入流量超过设定的速率，超出的数据会被丢弃，无法处理高峰流量。</li></ul><h4 id="1-3-漏斗算法的应用场景"><a href="#1-3-漏斗算法的应用场景" class="headerlink" title="1.3 漏斗算法的应用场景"></a>1.3 漏斗算法的应用场景</h4><p>漏斗算法通常适用于需要严格限制传输速率的场景，如视频流和音频流的传输等。在这些场景中，保持稳定的传输速率非常重要。</p><h4 id="1-4-漏斗算法的-Java-实现"><a href="#1-4-漏斗算法的-Java-实现" class="headerlink" title="1.4 漏斗算法的 Java 实现"></a>1.4 漏斗算法的 Java 实现</h4><p>以下是一个漏斗算法的简单实现示例。如果请求超过了漏斗的处理速率，多余的请求将被丢弃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeakyBucket</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// 漏斗容量 ，即最大可以同时处理的请求数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> leakyRate; <span class="hljs-comment">// 漏出速率，表示每秒钟可以处理的请求数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> water; <span class="hljs-comment">// 当前漏斗中的水量，代表未处理的请求数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastLeakTime; <span class="hljs-comment">// 上一次漏水（处理请求）的时间</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LeakyBucket</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity, <span class="hljs-type">int</span> leakyRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity; <span class="hljs-comment">// 初始化漏斗容量</span><br>        <span class="hljs-built_in">this</span>.leakyRate = leakyRate; <span class="hljs-comment">// 初始化每秒处理的请求数</span><br>        <span class="hljs-built_in">this</span>.water = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化漏斗中的水量为0</span><br>        <span class="hljs-built_in">this</span>.lastLeakTime = System.currentTimeMillis(); <span class="hljs-comment">// 初始化上次漏水的时间为当前时间</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">// 获取当前时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">elapsedTime</span> <span class="hljs-operator">=</span> now - lastLeakTime; <span class="hljs-comment">// 计算自上次漏水以来的时间差</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leaked</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (elapsedTime * leakyRate / <span class="hljs-number">1000</span>); <span class="hljs-comment">// 计算应漏掉的水量</span><br>        water = Math.max(<span class="hljs-number">0</span>, water - leaked); <span class="hljs-comment">// 更新漏斗中的水量</span><br>        <span class="hljs-keyword">if</span> (leaked &gt; <span class="hljs-number">0</span>) &#123;<br>            lastLeakTime = now; <span class="hljs-comment">// 更新上次漏水时间</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (water &lt; capacity) &#123;<br>            water++; <span class="hljs-comment">// 如果漏斗未满，允许请求通过</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 漏斗已满，请求被丢弃</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LeakyBucket</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LeakyBucket</span>(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 初始化漏斗容量为5，处理速率为1个请求/秒</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Request &quot;</span> + i + <span class="hljs-string">&quot;: &quot;</span> + (bucket.tryRequest() ? <span class="hljs-string">&quot;Allowed&quot;</span> : <span class="hljs-string">&quot;Rejected&quot;</span>));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 模拟请求发送间隔为500毫秒</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、令牌桶算法（Token-Bucket-Algorithm）"><a href="#二、令牌桶算法（Token-Bucket-Algorithm）" class="headerlink" title="二、令牌桶算法（Token Bucket Algorithm）"></a>二、令牌桶算法（Token Bucket Algorithm）</h3><h4 id="2-1-令牌桶算法的基本原理"><a href="#2-1-令牌桶算法的基本原理" class="headerlink" title="2.1 令牌桶算法的基本原理"></a>2.1 令牌桶算法的基本原理</h4><p>令牌桶算法通过生成和消耗令牌的方式来控制流量。每当一个数据包准备被发送时，系统必须先从令牌桶中获取一个令牌。如果桶中没有令牌，数据包就无法发送。</p><p>令牌桶算法的工作流程：</p><ol><li>令牌以固定的速率生成，并存放在令牌桶中。</li><li>当数据包需要发送时，必须消耗一定数量的令牌。</li><li>如果令牌足够，数据包被发送；如果令牌不足，数据包会等待或被丢弃。</li></ol><p>与漏斗算法不同，令牌桶算法允许流量在短时间内超出设定速率，支持突发流量。</p><h4 id="2-2-令牌桶算法的优缺点"><a href="#2-2-令牌桶算法的优缺点" class="headerlink" title="2.2 令牌桶算法的优缺点"></a>2.2 令牌桶算法的优缺点</h4><p><strong>优点：</strong></p><ul><li>能够处理突发流量，允许短时间的高峰数据传输。</li><li>灵活性更高，可以控制平均流量速率，并且能处理突发流量。</li></ul><p><strong>缺点：</strong></p><ul><li>在持续超出带宽限制的情况下，可能会出现延迟或丢包。</li></ul><h4 id="2-3-令牌桶算法的应用场景"><a href="#2-3-令牌桶算法的应用场景" class="headerlink" title="2.3 令牌桶算法的应用场景"></a>2.3 令牌桶算法的应用场景</h4><p>令牌桶算法适用于需要控制平均流量速率，但同时又允许突发流量的场景，如 Web 请求、HTTP API 调用等。</p><h4 id="2-4-令牌桶算法的-Java-实现"><a href="#2-4-令牌桶算法的-Java-实现" class="headerlink" title="2.4 令牌桶算法的 Java 实现"></a>2.4 令牌桶算法的 Java 实现</h4><p>下面是一个令牌桶算法的简单实现示例。算法允许突发流量，并通过生成和消耗令牌来控制请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenBucket</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// 桶的容量，即最大能容纳多少个令牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> tokenRate; <span class="hljs-comment">// 令牌生成速率，表示每秒生成的令牌数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tokens; <span class="hljs-comment">// 当前桶中的令牌数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastTokenTime; <span class="hljs-comment">// 上次生成令牌的时间戳</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TokenBucket</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity, <span class="hljs-type">int</span> tokenRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-built_in">this</span>.tokenRate = tokenRate;<br>        <span class="hljs-built_in">this</span>.tokens = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.lastTokenTime = System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">allowRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">elapsedTime</span> <span class="hljs-operator">=</span> currentTime - lastTokenTime; <span class="hljs-comment">// 计算上次生成令牌后经过的时间</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">newTokens</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (elapsedTime * tokenRate / <span class="hljs-number">1000</span>); <span class="hljs-comment">// 计算应生成的新令牌数量</span><br>        tokens = Math.min(capacity, tokens + newTokens); <span class="hljs-comment">// 更新桶中的令牌数量</span><br>        <span class="hljs-keyword">if</span> (newTokens &gt; <span class="hljs-number">0</span>) &#123;<br>            lastTokenTime = currentTime; <span class="hljs-comment">// 更新上次生成令牌的时间</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (tokens &gt; <span class="hljs-number">0</span>) &#123;<br>            tokens--; <span class="hljs-comment">// 消耗一个令牌</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 没有令牌，拒绝请求</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TokenBucket</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenBucket</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 初始化令牌桶，容量为10，令牌生成速率为每秒1个</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Request &quot;</span> + i + <span class="hljs-string">&quot;: &quot;</span> + (bucket.allowRequest() ? <span class="hljs-string">&quot;Allowed&quot;</span> : <span class="hljs-string">&quot;Rejected&quot;</span>));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 模拟请求的间隔时间为500毫秒</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、漏斗算法与令牌桶算法的对比"><a href="#三、漏斗算法与令牌桶算法的对比" class="headerlink" title="三、漏斗算法与令牌桶算法的对比"></a>三、漏斗算法与令牌桶算法的对比</h3><table><thead><tr><th>特性</th><th>漏斗算法</th><th>令牌桶算法</th></tr></thead><tbody><tr><td>流量控制</td><td>严格的固定输出速率</td><td>允许突发流量</td></tr><tr><td>数据丢弃</td><td>超出速率的数据被丢弃</td><td>瞬时突发流量可以被处理</td></tr><tr><td>实现难度</td><td>简单易实现</td><td>略微复杂</td></tr><tr><td>适用场景</td><td>需要严格限制传输速率的场景</td><td>需要处理突发流量的场景</td></tr></tbody></table><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>漏斗算法和令牌桶算法各有优缺点，具体使用时应根据实际场景进行选择：</p><ul><li><strong>漏斗算法</strong> 适用于那些需要严格控制流量的场景，如音视频流传输等，保证数据传输的稳定性。</li><li><strong>令牌桶算法</strong> 则适用于需要处理突发流量的场景，如 Web 服务和 API 调用。</li></ul><p>两者在不同场景中常常配合使用，以达到更好的流量控制效果。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
      <tag>限流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入了解缓存算法：FIFO、LFU 和 LRU 的原理及实现</title>
    <link href="/2024/09/16/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%EF%BC%9AFIFO%E3%80%81LFU%20%E5%92%8C%20LRU%20%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/09/16/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%EF%BC%9AFIFO%E3%80%81LFU%20%E5%92%8C%20LRU%20%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="深入了解缓存算法：FIFO、LFU-和-LRU-的原理及实现"><a href="#深入了解缓存算法：FIFO、LFU-和-LRU-的原理及实现" class="headerlink" title="深入了解缓存算法：FIFO、LFU 和 LRU 的原理及实现"></a>深入了解缓存算法：FIFO、LFU 和 LRU 的原理及实现</h3><p>在现代计算中，<strong>缓存算法</strong>在提高数据访问速度和优化系统性能方面发挥着至关重要的作用。不同的缓存策略有其独特的优点，适用于不同的应用场景。本文将深入探讨三种常见的缓存替换算法：<strong>FIFO（先进先出）</strong>、<strong>LFU（最少使用）</strong> 和 <strong>LRU（最近最少使用）</strong>，并通过 <strong>Java</strong> 代码展示它们的实现原理。</p><h3 id="1-FIFO（先进先出）算法"><a href="#1-FIFO（先进先出）算法" class="headerlink" title="1. FIFO（先进先出）算法"></a>1. FIFO（先进先出）算法</h3><p><strong>FIFO（First-In-First-Out）</strong> 是最简单的缓存替换算法，它遵循“先进先出”的原则，即最早进入缓存的数据在缓存满时最先被移除。此策略简单直接，适用于对缓存的访问次序没有明显规律的情况。</p><h4 id="Java-实现："><a href="#Java-实现：" class="headerlink" title="Java 实现："></a>Java 实现：</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    FIFO 先进先出缓存算法：</span><br><span class="hljs-comment">    - capacity: 缓存的最大容量</span><br><span class="hljs-comment">    - cache: 存储键的队列，维护先入先出的顺序</span><br><span class="hljs-comment">    - map: 键值对的映射，快速查找缓存中的值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FIFOCache</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Queue&lt;K&gt; cache; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, V&gt; <span class="hljs-built_in">map</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        构造函数：设置缓存容量，并初始化队列和映射</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FIFOCache</span>(<span class="hljs-type">int</span> capacity) &#123;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">capacity</span> = capacity;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">cache</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取缓存中的值：</span><br><span class="hljs-comment">        - 如果键存在，返回对应的值</span><br><span class="hljs-comment">        - 如果键不存在，返回 null</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-built_in">get</span>(K <span class="hljs-built_in">key</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>.<span class="hljs-property">get</span>(<span class="hljs-built_in">key</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        添加新元素到缓存：</span><br><span class="hljs-comment">        - 如果缓存已满，移除最早的键值对</span><br><span class="hljs-comment">        - 将新键值对添加到缓存</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span>(K <span class="hljs-built_in">key</span>, V value) &#123;<br>        <span class="hljs-keyword">if</span> (cache.<span class="hljs-property">size</span>() &gt;= capacity) &#123;<br>            K oldestKey = cache.<span class="hljs-property">poll</span>(); <span class="hljs-comment">// 移除最早添加的键</span><br>            <span class="hljs-built_in">map</span>.<span class="hljs-property">remove</span>(oldestKey); <span class="hljs-comment">// 从映射中删除键值对</span><br>        &#125;<br>        cache.<span class="hljs-property">offer</span>(<span class="hljs-built_in">key</span>); <span class="hljs-comment">// 将新键添加到队列末尾</span><br>        <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-built_in">key</span>, value); <span class="hljs-comment">// 将新键值对存入映射</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点：</strong></h4><ul><li><strong>优点：</strong> 实现非常简单，不需要复杂的数据结构。</li><li><strong>缺点：</strong> 可能会丢弃最近仍然频繁使用的数据，因此无法有效利用缓存的访问局部性。</li></ul><h3 id="2-LFU（最少使用）算法"><a href="#2-LFU（最少使用）算法" class="headerlink" title="2. LFU（最少使用）算法"></a>2. LFU（最少使用）算法</h3><p><strong>LFU（Least Frequently Used）</strong> 算法根据数据的访问频率来决定哪些数据需要被替换。当缓存满时，访问频率最低的数据会被移除。LFU 更适合应用在访问频率有明显差异的场景，例如热点数据。</p><h4 id="Java-实现：-1"><a href="#Java-实现：-1" class="headerlink" title="Java 实现："></a>Java 实现：</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    LFU 最少使用缓存算法：</span><br><span class="hljs-comment">    - capacity: 缓存的最大容量</span><br><span class="hljs-comment">    - map: 存储键值对的映射</span><br><span class="hljs-comment">    - freqMap: 存储每个键的访问频率</span><br><span class="hljs-comment">    - priorityQueue: 优先队列，根据频率对键进行排序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LFUCache</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, V&gt; <span class="hljs-built_in">map</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, Integer&gt; freqMap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PriorityQueue&lt;K&gt; priorityQueue;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        构造函数：设置容量，并初始化相关数据结构</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LFUCache</span>(<span class="hljs-type">int</span> capacity) &#123;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">capacity</span> = capacity;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">freqMap</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">priorityQueue</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">PriorityQueue</span>&lt;&gt;(<br>            (k1, k2) -&gt; freqMap.<span class="hljs-property">get</span>(k1) - freqMap.<span class="hljs-property">get</span>(k2)<br>        ); <span class="hljs-comment">// 优先队列根据访问频率排序</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取缓存中的值：</span><br><span class="hljs-comment">        - 如果键存在，更新访问频率并返回对应的值</span><br><span class="hljs-comment">        - 如果键不存在，返回 null</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-built_in">get</span>(K <span class="hljs-built_in">key</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">map</span>.<span class="hljs-property">containsKey</span>(<span class="hljs-built_in">key</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        freqMap.<span class="hljs-property">put</span>(<span class="hljs-built_in">key</span>, freqMap.<span class="hljs-property">get</span>(<span class="hljs-built_in">key</span>) + <span class="hljs-number">1</span>); <span class="hljs-comment">// 更新频率</span><br>        priorityQueue.<span class="hljs-property">remove</span>(<span class="hljs-built_in">key</span>); <span class="hljs-comment">// 移除旧的键</span><br>        priorityQueue.<span class="hljs-property">offer</span>(<span class="hljs-built_in">key</span>); <span class="hljs-comment">// 重新按频率排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>.<span class="hljs-property">get</span>(<span class="hljs-built_in">key</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        添加新元素到缓存：</span><br><span class="hljs-comment">        - 如果缓存已满，移除访问频率最低的键值对</span><br><span class="hljs-comment">        - 添加新键值对，并将其访问频率设置为 1</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span>(K <span class="hljs-built_in">key</span>, V value) &#123;<br>        <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>.<span class="hljs-property">size</span>() &gt;= capacity) &#123;<br>            K leastFreqKey = priorityQueue.<span class="hljs-property">poll</span>(); <span class="hljs-comment">// 获取频率最低的键</span><br>            <span class="hljs-built_in">map</span>.<span class="hljs-property">remove</span>(leastFreqKey); <span class="hljs-comment">// 从缓存中删除</span><br>            freqMap.<span class="hljs-property">remove</span>(leastFreqKey); <span class="hljs-comment">// 删除频率记录</span><br>        &#125;<br><br>        <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-built_in">key</span>, value);<br>        freqMap.<span class="hljs-property">put</span>(<span class="hljs-built_in">key</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 新键的初始频率为 1</span><br>        priorityQueue.<span class="hljs-property">offer</span>(<span class="hljs-built_in">key</span>); <span class="hljs-comment">// 添加新键到优先队列</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a><strong>特点：</strong></h4><ul><li><strong>优点：</strong> 可以保留访问频率较高的数据，适合频繁访问的数据集。</li><li><strong>缺点：</strong> 实现较复杂，优先队列的维护有一定开销。需要根据频率排序，增加了计算复杂度。</li></ul><h3 id="3-LRU（最近最少使用）算法"><a href="#3-LRU（最近最少使用）算法" class="headerlink" title="3. LRU（最近最少使用）算法"></a>3. LRU（最近最少使用）算法</h3><p><strong>LRU（Least Recently Used）</strong> 是一种根据数据最近使用时间来决定替换数据的算法。当缓存满时，最近最少使用的数据会被移除。该算法适合处理“时间局部性”问题，也就是最近使用过的数据更可能在短期内再次使用。</p><h4 id="Java-实现：-2"><a href="#Java-实现：-2" class="headerlink" title="Java 实现："></a>Java 实现：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    LRU 最近最少使用缓存算法：</span><br><span class="hljs-comment">    - capacity: 缓存的最大容量</span><br><span class="hljs-comment">    - linkedHashMap: 维护访问顺序的链表（按访问时间排序）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> capacity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LinkedHashMap&lt;K, V&gt; linkedHashMap;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        构造函数：初始化缓存，设置访问顺序为 true，使其按照 LRU 策略工作</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRUCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.capacity = capacity;<br>        <span class="hljs-keyword">this</span>.linkedHashMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;(capacity, <span class="hljs-number">0.75</span>f, <span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> size() &gt; capacity; <span class="hljs-comment">// 超过容量时移除最久未使用的元素</span><br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        添加新元素到缓存：</span><br><span class="hljs-comment">        - 如果缓存已满，自动删除最久未使用的元素</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>        linkedHashMap.put(key, value); <span class="hljs-comment">// 更新或插入新元素</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取缓存中的值：</span><br><span class="hljs-comment">        - 如果键存在，更新其访问顺序并返回对应的值</span><br><span class="hljs-comment">        - 如果键不存在，返回 null</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">V <span class="hljs-title">get</span><span class="hljs-params">(K key)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> linkedHashMap.<span class="hljs-title">get</span><span class="hljs-params">(key)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a><strong>特点：</strong></h4><ul><li><strong>优点：</strong> 通过双向链表维护最近访问的顺序，能很好地处理频繁访问的数据。</li><li><strong>缺点：</strong> 需要借助 <code>LinkedHashMap</code> 或双向链表，操作相对简单，但仍有一些额外的开销。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不同的缓存算法适用于不同的场景：</p><ul><li><strong>FIFO</strong> 简单易用，但适用性较窄，可能丢弃尚未使用的数据。</li><li><strong>LFU</strong> 适合访问频率有显著差异的场景，能够保留最常用的数据，但实现较为复杂。</li><li><strong>LRU</strong> 通过记录数据的访问时间，能很好地解决时间局部性问题，是一种较为通用的缓存算法。</li></ul><p>选择合适的缓存算法，可以显著提高系统的响应速度和性能。根据具体业务需求来选择算法，例如热点数据场景可以选择 <strong>LFU</strong>，而需要更好处理短期访问的场景则可以选用 <strong>LRU</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存算法</tag>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架中的过滤器、拦截器与切面（AOP）</title>
    <link href="/2024/09/14/%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%88%87%E9%9D%A2%EF%BC%88AOP%EF%BC%89/"/>
    <url>/2024/09/14/%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%88%87%E9%9D%A2%EF%BC%88AOP%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的过滤器、拦截器与切面（AOP）"><a href="#Spring框架中的过滤器、拦截器与切面（AOP）" class="headerlink" title="Spring框架中的过滤器、拦截器与切面（AOP）"></a>Spring框架中的过滤器、拦截器与切面（AOP）</h1><h3 id="什么是过滤器、拦截器和切面（AOP）？"><a href="#什么是过滤器、拦截器和切面（AOP）？" class="headerlink" title="什么是过滤器、拦截器和切面（AOP）？"></a>什么是过滤器、拦截器和切面（AOP）？</h3><p>在Spring框架中，<strong>过滤器（Filter）</strong>、<strong>拦截器（Interceptor）</strong> 和 <strong>切面（AOP）</strong> 各自有不同的用途。它们是实现横切关注点的重要工具，尤其是在处理<strong>日志记录</strong>、<strong>权限验证</strong>、<strong>性能监控</strong>、<strong>事务管理</strong>等方面。了解这些概念及其实现方式，可以帮助开发者构建更为健壮、灵活的Spring应用。</p><hr><h3 id="过滤器（Filter）"><a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>依赖于Servlet容器</strong>：过滤器是Java EE标准的一部分，必须在Servlet容器（如Tomcat、Jetty）中运行。</li><li><strong>作用范围广</strong>：能够拦截所有类型的HTTP请求，涵盖静态资源、JSP、Servlet等。</li><li><strong>常见应用场景</strong>：用于实现<strong>请求日志记录</strong>、<strong>权限控制</strong>、<strong>字符编码设置</strong>等功能。</li><li><strong>实现方式</strong>：通过实现 <code>javax.servlet.Filter</code> 接口，并进行配置。</li></ul><h4 id="示例：如何创建一个过滤器"><a href="#示例：如何创建一个过滤器" class="headerlink" title="示例：如何创建一个过滤器"></a>示例：如何创建一个过滤器</h4><p>实现 <code>javax.servlet.Filter</code> 接口，处理请求和响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">// 初始化过滤器</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br>            <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br><br>        <span class="hljs-comment">// 处理前逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;处理请求前&quot;</span>);<br><br>        chain.doFilter(request, response); <span class="hljs-comment">// 继续处理</span><br><br>        <span class="hljs-comment">// 处理后逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;处理响应后&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 资源清理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在Spring-Boot中注册过滤器"><a href="#在Spring-Boot中注册过滤器" class="headerlink" title="在Spring Boot中注册过滤器"></a>在Spring Boot中注册过滤器</h4><p>使用 <code>FilterRegistrationBean</code> 来注册过滤器，并设定URL模式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean&lt;CustomFilter&gt; customFilterRegistration() &#123;<br>        FilterRegistrationBean&lt;CustomFilter&gt; registrationBean = new FilterRegistrationBean&lt;&gt;();<br>        registrationBean.setFilter(new CustomFilter());<br>        registrationBean.addUrlPatterns(<span class="hljs-string">&quot;/api/*&quot;</span>);<br>        registrationBean.setOrder(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="拦截器（Interceptor）"><a href="#拦截器（Interceptor）" class="headerlink" title="拦截器（Interceptor）"></a>拦截器（Interceptor）</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>框架层面实现</strong>：拦截器是Spring MVC框架的组成部分，不依赖于Servlet容器。</li><li><strong>作用范围相对较窄</strong>：拦截器主要用于拦截Controller方法的调用。</li><li><strong>常见应用场景</strong>：用于实现<strong>权限验证</strong>、<strong>日志记录</strong>、<strong>事务控制</strong>等功能。</li><li><strong>实现方式</strong>：通过实现 <code>HandlerInterceptor</code> 接口，并在配置类中注册。</li></ul><h4 id="示例：创建一个自定义拦截器"><a href="#示例：创建一个自定义拦截器" class="headerlink" title="示例：创建一个自定义拦截器"></a>示例：创建一个自定义拦截器</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CustomInterceptor implements HandlerInterceptor &#123;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> preHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;处理请求前&quot;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; // 返回 <span class="hljs-keyword">true</span> 表示继续处理，返回 <span class="hljs-keyword">false</span> 停止请求<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> postHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>, ModelAndView modelAndView) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;处理请求后&quot;);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterCompletion(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>, <span class="hljs-keyword">Exception</span> ex) throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请求完成&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在Spring-Boot中注册拦截器"><a href="#在Spring-Boot中注册拦截器" class="headerlink" title="在Spring Boot中注册拦截器"></a>在Spring Boot中注册拦截器</h4><p>通过 <code>WebMvcConfigurer</code> 实现拦截器的注册。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Configuration</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">web</span>.<span class="hljs-property">servlet</span>.<span class="hljs-property">config</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">InterceptorRegistry</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">web</span>.<span class="hljs-property">servlet</span>.<span class="hljs-property">config</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">WebMvcConfigurer</span>;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addInterceptors</span>(<span class="hljs-params"><span class="hljs-title class_">InterceptorRegistry</span> registry</span>) &#123;<br>        registry.<span class="hljs-title function_">addInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomInterceptor</span>()).<span class="hljs-title function_">addPathPatterns</span>(<span class="hljs-string">&quot;/api/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>面向切面编程（AOP）</strong>：切面用于在<strong>方法执行前后</strong>或<strong>抛出异常时</strong>拦截，并添加额外逻辑。</li><li><strong>广泛适用</strong>：适用于Spring管理的所有Bean，能够<strong>获取方法参数</strong>、<strong>修改返回值</strong>。</li><li><strong>常见应用场景</strong>：用于<strong>日志记录</strong>、<strong>性能监控</strong>、<strong>异常处理</strong>和<strong>安全控制</strong>。</li><li><strong>执行顺序</strong>：切面可以通过 <code>@Before</code>、<code>@After</code>、<code>@AfterReturning</code>、<code>@AfterThrowing</code> 和 <code>@Around</code> 注解控制方法的各个阶段。</li></ul><h4 id="示例：定义一个日志切面"><a href="#示例：定义一个日志切面" class="headerlink" title="示例：定义一个日志切面"></a>示例：定义一个日志切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.example.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serviceLayer</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;serviceLayer()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行前: &quot;</span> + joinPoint.getSignature().getName());<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;serviceLayer()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行后: &quot;</span> + joinPoint.getSignature().getName());<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;serviceLayer()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知 - 方法执行前: &quot;</span> + joinPoint.getSignature().getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知 - 方法执行后: &quot;</span> + joinPoint.getSignature().getName());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ol><li><strong>过滤器</strong>：最早执行，作用于整个请求生命周期，主要处理HTTP请求的预处理和后处理。</li><li><strong>拦截器</strong>：在过滤器之后执行，拦截Controller的请求和响应。</li><li><strong>切面（AOP）</strong>：切面在拦截器之后执行，横向切入业务逻辑中，实现不同方法阶段的自定义逻辑。</li></ol><hr><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过合理使用过滤器、拦截器和切面，开发者可以更灵活地控制Spring应用中的请求处理流程，提升应用的可维护性和扩展性。理解这三者的区别和联系，对于构建高效的Spring应用至关重要。</p>]]></content>
    
    
    <categories>
      
      <category>Spring框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>过滤器</tag>
      
      <tag>拦截器</tag>
      
      <tag>AOP</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 集成消息代理 ActiveMQ 教程</title>
    <link href="/2024/09/14/Spring%E9%9B%86%E6%88%90%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86ActiveMQ%E6%95%99%E7%A8%8B/"/>
    <url>/2024/09/14/Spring%E9%9B%86%E6%88%90%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86ActiveMQ%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-集成消息代理-ActiveMQ-教程"><a href="#Spring-集成消息代理-ActiveMQ-教程" class="headerlink" title="Spring 集成消息代理 ActiveMQ 教程"></a>Spring 集成消息代理 ActiveMQ 教程</h1><p><strong>ActiveMQ</strong> 是一种流行的开源消息代理（Message Broker），支持<strong>JMS</strong>（Java Message Service）规范，用于在分布式系统中实现可靠的异步消息传递。在这篇文章中，我们将深入探讨如何在 <strong>Spring</strong> 框架中集成 ActiveMQ，帮助你快速上手消息代理技术。</p><h2 id="什么是-ActiveMQ-及其优势"><a href="#什么是-ActiveMQ-及其优势" class="headerlink" title="什么是 ActiveMQ 及其优势"></a>什么是 ActiveMQ 及其优势</h2><p>ActiveMQ 是 Apache 提供的开源消息中间件，广泛应用于大规模分布式系统中。它支持多种协议，包括 <strong>AMQP</strong>、<strong>STOMP</strong> 和 <strong>MQTT</strong>，可以轻松实现应用间的高效通信。其主要优势包括：</p><ul><li><strong>异步消息处理</strong>：通过异步方式提升系统响应速度和吞吐量。</li><li><strong>可靠的消息传递</strong>：确保消息的可靠性和持久化。</li><li><strong>高可扩展性</strong>：支持集群和负载均衡，适合大型分布式系统。</li></ul><h2 id="下载和安装-ActiveMQ"><a href="#下载和安装-ActiveMQ" class="headerlink" title="下载和安装 ActiveMQ"></a>下载和安装 ActiveMQ</h2><p>在开始集成 ActiveMQ 之前，你需要先下载并安装 ActiveMQ。可以从 <a href="https://activemq.apache.org/">Apache ActiveMQ 官方网站</a> 获取最新版本的安装包。根据操作系统进行安装，Windows 和 Linux 都支持。</p><h2 id="启动-ActiveMQ"><a href="#启动-ActiveMQ" class="headerlink" title="启动 ActiveMQ"></a>启动 ActiveMQ</h2><p>安装成功后，使用命令启动 ActiveMQ。导航到 ActiveMQ 的安装目录 <code>bin</code> 文件夹，然后执行以下命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">activemq <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>启动成功后，可以通过浏览器访问 <a href="http://127.0.0.1:8161/">http://127.0.0.1:8161</a> 打开 ActiveMQ 的 web 控制台，默认账户和密码为 <code>admin/admin</code>。</p><h3 id="停止-ActiveMQ"><a href="#停止-ActiveMQ" class="headerlink" title="停止 ActiveMQ"></a>停止 ActiveMQ</h3><p>在 Windows 系统中，可以通过以下命令停止 ActiveMQ 服务：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">activemq stop<br></code></pre></td></tr></table></figure><h2 id="如何在-Spring-中集成-ActiveMQ"><a href="#如何在-Spring-中集成-ActiveMQ" class="headerlink" title="如何在 Spring 中集成 ActiveMQ"></a>如何在 Spring 中集成 ActiveMQ</h2><h3 id="第一步：添加-Maven-依赖"><a href="#第一步：添加-Maven-依赖" class="headerlink" title="第一步：添加 Maven 依赖"></a>第一步：添加 Maven 依赖</h3><p>要在 Spring 项目中使用 ActiveMQ，首先需要在 <code>pom.xml</code> 文件中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring JMS 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ActiveMQ 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.activemq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activemq-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.18.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Log4j 日志依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.17.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第二步：配置-JMS-和-ActiveMQ"><a href="#第二步：配置-JMS-和-ActiveMQ" class="headerlink" title="第二步：配置 JMS 和 ActiveMQ"></a>第二步：配置 JMS 和 ActiveMQ</h3><p>在 Spring 项目中，我们需要创建一个配置类来管理 <strong>JMS</strong> 连接和 <strong>ActiveMQ</strong> 的设置。以下是一个完整的配置示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">activemq</span>.<span class="hljs-property">ActiveMQConnectionFactory</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Bean</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Configuration</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">jms</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">EnableJms</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">jms</span>.<span class="hljs-property">core</span>.<span class="hljs-property">JmsTemplate</span>;<br><span class="hljs-keyword">import</span> javax.<span class="hljs-property">jms</span>.<span class="hljs-property">ConnectionFactory</span>;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableJms</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JmsConfig</span> &#123;<br><br>    <span class="hljs-comment">// 配置 ActiveMQ 连接工厂</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ConnectionFactory</span> <span class="hljs-title function_">connectionFactory</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">ActiveMQConnectionFactory</span> connectionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>();<br>        connectionFactory.<span class="hljs-title function_">setBrokerURL</span>(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>        <span class="hljs-keyword">return</span> connectionFactory;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置 JmsTemplate 用于消息发送</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">JmsTemplate</span> <span class="hljs-title function_">jmsTemplate</span>(<span class="hljs-params"><span class="hljs-title class_">ConnectionFactory</span> connectionFactory</span>) &#123;<br>        <span class="hljs-title class_">JmsTemplate</span> jmsTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JmsTemplate</span>();<br>        jmsTemplate.<span class="hljs-title function_">setConnectionFactory</span>(connectionFactory);<br>        <span class="hljs-keyword">return</span> jmsTemplate;<br>    &#125;<br>    <br>     <span class="hljs-comment">// 配置消息监听器容器工厂</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">JmsListenerContainerFactory</span>&lt;?&gt; <span class="hljs-title function_">jmsListenerContainerFactory</span>(<span class="hljs-params"><span class="hljs-title class_">ConnectionFactory</span> connectionFactory</span>) &#123;<br>        <span class="hljs-title class_">DefaultJmsListenerContainerFactory</span> factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultJmsListenerContainerFactory</span>();<br>        factory.<span class="hljs-title function_">setConnectionFactory</span>(connectionFactory);<br><span class="hljs-comment">//        factory.setPubSubDomain(true); // 默认为点对点（Queue）模式  设置为true表示发布/订阅（Topic）模式</span><br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三步：创建消息生产者和消费者"><a href="#第三步：创建消息生产者和消费者" class="headerlink" title="第三步：创建消息生产者和消费者"></a>第三步：创建消息生产者和消费者</h3><h4 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h4><p>消息生产者用于发送消息到 ActiveMQ 队列。下面是一个简单的消息发送实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Autowired</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">jms</span>.<span class="hljs-property">core</span>.<span class="hljs-property">JmsTemplate</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageProducer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">JmsTemplate</span> jmsTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> message</span>) &#123;<br>        jmsTemplate.<span class="hljs-title function_">convertAndSend</span>(<span class="hljs-string">&quot;myQueue&quot;</span>, message);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;发送的消息为: &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h4><p>消费者则用于监听并接收消息：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.springframework.jms.<span class="hljs-keyword">annotation</span>.JmsListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@JmsListener(destination = <span class="hljs-string">&quot;myQueue&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> void receiveMessage(String message) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;接收到的消息: &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四步：测试消息发送与接收"><a href="#第四步：测试消息发送与接收" class="headerlink" title="第四步：测试消息发送与接收"></a>第四步：测试消息发送与接收</h3><p>最后，你可以通过以下代码测试消息的发送与接收：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AnnotationConfigApplicationContext</span>(JmsConfig.<span class="hljs-keyword">class</span>);<br>        MessageProducer producer = context.<span class="hljs-built_in">getBean</span>(MessageProducer.<span class="hljs-keyword">class</span>);<br>        producer.<span class="hljs-built_in">sendMessage</span>(<span class="hljs-string">&quot;Hello, ActiveMQ!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见问题与解决方法"><a href="#常见问题与解决方法" class="headerlink" title="常见问题与解决方法"></a>常见问题与解决方法</h2><ol><li><strong>ActiveMQ 连接失败</strong>：检查 ActiveMQ 服务是否正常启动，确保 <code>brokerURL</code> 配置正确。</li><li><strong>消费者未接收消息</strong>：检查是否在正确的队列或主题上监听消息。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过将 <strong>ActiveMQ</strong> 与 <strong>Spring</strong> 集成，你可以大幅提升系统的消息处理能力，尤其在分布式系统中，ActiveMQ 能够确保可靠的异步消息传递。希望本文的详细步骤能帮助你快速实现 ActiveMQ 与 Spring 的集成。</p>]]></content>
    
    
    <categories>
      
      <category>分布式系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>ActiveMQ</tag>
      
      <tag>消息队列</tag>
      
      <tag>JMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义HashMap</title>
    <link href="/2024/09/13/%E8%87%AA%E5%AE%9A%E4%B9%89HashMap/"/>
    <url>/2024/09/13/%E8%87%AA%E5%AE%9A%E4%B9%89HashMap/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义HashMap"><a href="#自定义HashMap" class="headerlink" title="自定义HashMap"></a>自定义HashMap</h1><ol><li><strong>数组和链表结构</strong>：HashMap 底层采用数组加链表的数据结构。数组用于存储键值对，而链表则用于解决哈希冲突。</li><li><strong>哈希算法</strong>：当我们使用 <code>put(key, value)</code> 方法存储数据时，HashMap 首先会调用 <code>hashCode()</code> 方法计算 key 的哈希值，然后通过哈希算法将其转换成数组的一个下标，对应存储位置。</li><li><strong>数据碰撞</strong>：如果该位置已经有数据，就会发生数据碰撞。此时，HashMap 遍历该位置上的链表，通过 <code>equals()</code> 方法比对每个数据的 key。如果 key 相同，会覆盖链表上该位置的数据；如果 key 不同，会根据 J采用头插法将数据存储在链表中。</li><li><strong>链表转红黑树</strong>：当链表上的节点个数大于等于 时，链表会自动转化成红黑树，以提高查找效率。</li></ol><h3 id="Node保存数据信息"><a href="#Node保存数据信息" class="headerlink" title="Node保存数据信息"></a>Node保存数据信息</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">        相当于HashMap 中的Entry&lt;K,V&gt;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;&#123;<br>    <span class="hljs-built_in">int</span> hash;  <span class="hljs-comment">//此Node计算出来的hash值，用这个hash值可以找到在数组中的位置</span><br>    K k;       <span class="hljs-comment">//键</span><br>    V v;       <span class="hljs-comment">//值</span><br>    Node&lt;K,V&gt; next;<span class="hljs-comment">//如果hash冲突，生成链表的话，则next就是指向下一个节点，没有下一个节点就是null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> hash, K k, V v, Node&lt;K, V&gt; next</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.hash = hash;<br>        <span class="hljs-keyword">this</span>.k = k;<br>        <span class="hljs-keyword">this</span>.v = v;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;hash=&quot;</span> + hash +<br>                <span class="hljs-string">&quot;, k=&quot;</span> + k +<br>                <span class="hljs-string">&quot;, v=&quot;</span> + v +<br>                <span class="hljs-string">&quot;, next=&quot;</span> + next +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHash</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> hash</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.hash = hash;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setK</span>(<span class="hljs-params">K k</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.k = k;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setV</span>(<span class="hljs-params">V v</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.v = v;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span>(<span class="hljs-params">Node&lt;K, V&gt; next</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getHash</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> hash;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">getK</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">getV</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node&lt;K, V&gt; <span class="hljs-title">getNext</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="table数组：保存每个Node"><a href="#table数组：保存每个Node" class="headerlink" title="table数组：保存每个Node"></a>table数组：保存每个Node</h3><h4 id="public-V-get-K-k-思路："><a href="#public-V-get-K-k-思路：" class="headerlink" title="public V get(K k)思路："></a>public V get(K k)思路：</h4><p>1.根据 k 得到  数组下标</p><p>2.根据下标得到table中取出Node</p><p>3.Node&#x3D;&#x3D;null    说明数组中没有这个key     直接返回null</p><p>4.Node!&#x3D;null     说明数组中存了这个key   </p><p>​(1)这个Node中的next为空，说明这不是链表，只是唯一的一个节点，则直接取这个节点v返回</p><p>​(2)这个Node中的next不为空，说明这是个链表(这个链表中的node的k不同，但生成的hash值(即索引)相同),循环这个链表，比较每个node中的k与要找的k是不是equals</p><h4 id="public-void-put-K-k-V-v-思路："><a href="#public-void-put-K-k-V-v-思路：" class="headerlink" title="public void put(K k , V v )思路："></a>public void put(K k , V v )思路：</h4><p>1.先根据k计算数组索引</p><p>2.取出这个索引位置的node</p><p>​node &#x3D;&#x3D; null 说明没有冲突，直接放到数组的索引位置</p><p>​node !&#x3D; null  说明有冲突，</p><p>​  k与node中的k相同，则将v覆盖</p><p>​  k与node中的k不同，则表明不同key生成了相同hash，hash冲突，生成链表的节点 ，使用头插法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyHashMap&lt;K,V&gt; &#123;<br><br>    <span class="hljs-comment">//  map的底层就是一个Node数组，每个元素都是一个Node，如果这个元素位置有hash冲突，则这个node变为链表</span><br>    <span class="hljs-keyword">private</span> Node&lt;K,V&gt;[] table;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        数组的初始大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">4</span>; <span class="hljs-comment">//1&lt;&lt;4 = 1000  就是 16</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">size</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">//表示table中实际存的元素个数</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        负载因子：减少生成链表的机会  因为table一旦存满了，则必会增加生成链表的机会</span><br><span class="hljs-comment">        所有在table还没存满前，就要扩容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_FACTOR=<span class="hljs-number">0.75</span>f;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">          阈值：数组容量*负载因子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> threshold;<br><br>    <span class="hljs-keyword">public</span> MyHashMap()&#123;<br>        table=<span class="hljs-keyword">new</span> Node[DEFAULT_INITIAL_CAPACITY ];<br>        threshold = (<span class="hljs-keyword">int</span>) (DEFAULT_FACTOR*table.length);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">size</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-keyword">size</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> V get(K k)&#123;<br>        <span class="hljs-comment">//1.根据 K 得到 数组下标</span><br>        <span class="hljs-keyword">int</span> index = index(table.length, k );<br>        <span class="hljs-comment">//2.根据下标得到table中取出Node</span><br>        Node&lt;K,V&gt; node = table[index];<br>        <span class="hljs-comment">//3.Node==null，说明map中还没有存这个key，直接返回null</span><br>        <span class="hljs-keyword">if</span> (node==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//4.Node!=null ,说明数组中有这个key</span><br>        <span class="hljs-comment">//      (1)这个Node中的next为空，说明这不是链表，只是唯一的一个节点，则直接取这个节点v返回</span><br>        <span class="hljs-keyword">if</span> (node.getNext()==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> node.getV();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//      (2)这个Node中的next不为空，说明这是个链表(这个链表中的node的k不同，但生成的hash值(即索引)相同)</span><br>            <span class="hljs-comment">//           循环这个链表，比较每个node中的k与要找的k是不是equals</span><br>            <span class="hljs-keyword">if</span> (node.getK() == k )&#123;<br>                <span class="hljs-keyword">return</span> node.getV();<br>            &#125;<br>            Node&lt;K,V&gt; <span class="hljs-keyword">next</span> = node.<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">next</span>!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">next</span>.getK() == k)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">next</span>.getV();<br>                &#125;<br>                <span class="hljs-keyword">next</span>=<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> put(K k , V v )&#123;<br>        <span class="hljs-comment">//1.先根据k计算数组索引</span><br>        <span class="hljs-keyword">int</span> index = index(table.length,k);<br>        <span class="hljs-comment">//2.取出这个索引 位置的node</span><br>        Node&lt;K,V&gt; node =table[index];<br>        <span class="hljs-comment">// 判断node==null 说明没有冲突</span><br>        <span class="hljs-comment">//           直接放到数组的索引位置</span><br>        <span class="hljs-keyword">if</span> ( node==<span class="hljs-keyword">null</span> )&#123;<br>            table[index] = <span class="hljs-keyword">new</span> Node&lt;&gt;( hash(k) , k , v , <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">size</span>++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node!=<span class="hljs-keyword">null</span> )&#123;<br>            <span class="hljs-comment">//node!=null  说明冲突</span><br>            <span class="hljs-keyword">if</span> ( node.getK()==k )&#123;<br>                <span class="hljs-comment">//      k与node中的k相同，则将v覆盖</span><br>                table[index] = <span class="hljs-keyword">new</span> Node&lt;&gt;( hash(k), k, v , <span class="hljs-keyword">null</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//链表的头插法</span><br>                <span class="hljs-comment">//  k与node中的k不同，则表明不同key生成了相同hash，hash冲突，生成链表的节点</span><br>                table[index] = <span class="hljs-keyword">new</span> Node&lt;&gt;( hash(k), k, v ,   node   );<br>                ++<span class="hljs-keyword">size</span>;<br>            &#125;<br>        &#125;<br>        System.out.<span class="hljs-keyword">println</span>(  <span class="hljs-string">&quot;元素个数：&quot;</span>+<span class="hljs-keyword">size</span>+<span class="hljs-string">&quot;,阈值：&quot;</span>+threshold+<span class="hljs-string">&quot;,容量：&quot;</span>+table.length);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">size</span>&gt;threshold)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;扩容&quot;</span>);<br>            resize();  <span class="hljs-comment">// 扩容  这个数组  ，要将数组中的原来的数据移动</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//扩容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> resize()&#123;<br>        <span class="hljs-comment">//  容量为2的幂次</span><br>        Node[] tableOld = table;<br>        Node[] tableNew = <span class="hljs-keyword">new</span> Node[tableOld.length&lt;&lt;<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;tableOld.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> ( tableOld[i]!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//原来node的hash值对新数组计算一次索引下标</span><br>                <span class="hljs-keyword">int</span> newIndex = index(  tableNew.length, tableOld[i].k );<br>                tableNew[newIndex] = tableOld[i];<br>            &#125;<br>        &#125;<br>        table = tableNew;<br>        <span class="hljs-comment">//更新阈值</span><br>        threshold = (<span class="hljs-keyword">int</span>) (DEFAULT_FACTOR*table.length);<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        利用hash()来完成key生成hashcode的操作</span><br><span class="hljs-comment">        object中原来就有hashCode(), key.hashCode()就已经生成了hash码?</span><br><span class="hljs-comment">        a b c d e f 不够离散    再进行生成减少hash冲突</span><br><span class="hljs-comment">        解决方案：1.先key.hashCode  2.hashCode是32位参数，将它的高低16位混洗，( ^ )</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash( Object key)&#123;<br>        <span class="hljs-keyword">int</span> h = key.hashCode();<span class="hljs-comment">//获取原来的hashCode</span><br>         <span class="hljs-comment">/*</span><br><span class="hljs-comment">              ^ 异或运算(位运算，相异为1，相同为0)</span><br><span class="hljs-comment">              &gt;&gt; 右移16位</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> (key==<span class="hljs-keyword">null</span>)?<span class="hljs-number">0</span>:( h^(h&gt;&gt;<span class="hljs-number">16</span>)    );<span class="hljs-comment">//打乱原来的hashCode并返回出去，减少hash冲突</span><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        计算在Node[]数组中的索引</span><br><span class="hljs-comment">        n:表示Node[]数组的长度  通常是2的幂次   -1： 全为1</span><br><span class="hljs-comment">            n=8  n-1=7   111</span><br><span class="hljs-comment">            n=16 n-1=15  1111</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> index(<span class="hljs-keyword">int</span> n,Object key)&#123;<br>        <span class="hljs-comment">//hash(key)%n;   //按位与操作比取模操作更高效</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            等同于求余数(即取低位的数)，其余数即为key在数组中的索引</span><br><span class="hljs-comment">            如 n=8 时 即取 hash(key)二进制的后面四位  取低位</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> (n-<span class="hljs-number">1</span>)&amp;hash(key);<span class="hljs-comment">// 按位与  取低位</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云滑动验证码</title>
    <link href="/2024/09/12/%E9%98%BF%E9%87%8C%E4%BA%91%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2024/09/12/%E9%98%BF%E9%87%8C%E4%BA%91%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云滑动验证码"><a href="#阿里云滑动验证码" class="headerlink" title="阿里云滑动验证码"></a>阿里云滑动验证码</h1><p>阿里云验证码的登录页面，主要功能是：</p><ul><li>用户在输入用户名和密码后，点击登录按钮触发验证码弹窗；</li><li>验证码通过后，验证码验证参数会通过异步请求发送到服务器；</li><li>服务器返回的结果决定是否通过业务验证，如果通过则进行下一步操作，否则给出提示。</li></ul><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码:"></a>前端代码:</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>人机验证<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--// 客户端body中的代码--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;space-semantic&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;embed-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>弹出式<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;embed-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username-embed&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;biz-input&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password-embed&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;biz-input&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--            //预留的验证码页面元素，用于配置初始化函数中的element参数--&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;captcha-element&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-btn&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--// 1.集成主JS--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://o.alicdn.com/captcha-frontend/aliyunCaptcha/AliyunCaptcha.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--// 2.新建一个&lt;script&gt;标签，用于调用验证码初始化函数initAliyunCaptcha--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> captcha;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 弹出式</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">initAliyunCaptcha</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">SceneId</span>: <span class="hljs-string">&#x27;场景ID&#x27;</span>, <span class="hljs-comment">// 场景ID。根据步骤二新建验证场景后，您可以在验证码场景列表，获取该场景的场景ID</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;身份标&#x27;</span>, <span class="hljs-comment">// 身份标。开通阿里云验证码2.0后，您可以在控制台概览页面的实例基本信息卡片区域，获取身份标</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;popup&#x27;</span>, <span class="hljs-comment">// 验证码模式。popup表示要集成的验证码模式为弹出式。无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#captcha-element&#x27;</span>, <span class="hljs-comment">//页面上预留的渲染验证码的元素，与原代码中预留的页面元素保持一致。</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">button</span>: <span class="hljs-string">&#x27;#button&#x27;</span>, <span class="hljs-comment">// 触发验证码弹窗的元素。button表示单击登录按钮后，触发captchaVerifyCallback函数。您可以根据实际使用的元素修改element的值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">captchaVerifyCallback</span>: captchaVerifyCallback, <span class="hljs-comment">// 业务请求(带验证码校验)回调函数，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">onBizResultCallback</span>: onBizResultCallback, <span class="hljs-comment">// 业务请求结果回调函数，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">getInstance</span>: getInstance, <span class="hljs-comment">// 绑定验证码实例函数，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">slideStyle</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">width</span>: <span class="hljs-number">360</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">height</span>: <span class="hljs-number">40</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-comment">// 滑块验证码样式，支持自定义宽度和高度，单位为px。其中，width最小值为320 px</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;cn&#x27;</span>, <span class="hljs-comment">// 验证码语言类型，支持简体中文（cn）、繁体中文（tw）、英文（en）</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">region</span>: <span class="hljs-string">&#x27;cn&#x27;</span> <span class="hljs-comment">//验证码示例所属地区，支持中国内地（cn）、新加坡（sgp）</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 绑定验证码实例函数。该函数为固定写法，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInstance</span>(<span class="hljs-params">instance</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        captcha = instance;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 业务请求(带验证码校验)回调函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * <span class="hljs-doctag">@name</span> <span class="hljs-variable">captchaVerifyCallback</span></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * <span class="hljs-doctag">@function</span></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * 请求参数：由验证码脚本回调的验证参数，不需要做任何处理，直接传给服务端即可</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * <span class="hljs-doctag">@params</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">captchaVerifyParam</span></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * 返回参数：字段名固定，captchaResult为必选；如无业务验证场景时，bizResult为可选</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     // * <span class="hljs-doctag">@returns</span> </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">captchaResult:</span> boolean, bizResult?: boolean|<span class="hljs-literal">undefined</span>&#125;&#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     */</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">captchaVerifyCallback</span>(<span class="hljs-params">captchaVerifyParam</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1.向后端发起业务请求，获取验证码验证结果和业务结果</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// const result = await fetch(&#x27;yzm.action?op=regYzm&#x27;, &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     captchaVerifyParam: captchaVerifyParam, // 验证码参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     // yourBizParam... // 业务参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     name: username,</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 构建请求体</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;captchaVerifyParam&#x27;</span>, captchaVerifyParam);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;captchaVerifyParam&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 发起 POST 请求</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;yzm.action?op=regYzm&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">body</span>: formData</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">NewResult</span> = <span class="hljs-keyword">await</span> result.<span class="hljs-title function_">json</span>(); <span class="hljs-comment">//将响应体解析为 JSON 格式</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2.构造标准返回参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> verifyResult = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">captchaResult</span>: <span class="hljs-title class_">NewResult</span>.<span class="hljs-property">code</span> <span class="hljs-comment">// 验证码验证是否通过，boolean类型，必选</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// bizResult: true, // 业务验证是否通过，boolean类型，可选；若为无业务验证结果的场景，bizResult可以为空</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> verifyResult;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 业务请求验证结果回调函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onBizResultCallback</span>(<span class="hljs-params">bizResult</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (bizResult === <span class="hljs-literal">true</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 如果业务验证通过，跳转到对应页面。此处以跳转到https://www.aliyun.com/页面为例</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// window.location.href = &#x27;https://www.aliyun.com/&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;666&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 如果业务验证不通过，给出不通过提示。此处不通过提示为业务验证不通过！</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;业务验证不通过！&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="后端-Servlet-接收（使用容器-Apache-Tomcat）"><a href="#后端-Servlet-接收（使用容器-Apache-Tomcat）" class="headerlink" title="后端 Servlet 接收（使用容器 Apache Tomcat）"></a>后端 Servlet 接收（使用容器 Apache Tomcat）</h2><h3 id="1-对前端传来的数据进行验证"><a href="#1-对前端传来的数据进行验证" class="headerlink" title="1.对前端传来的数据进行验证"></a>1.对前端传来的数据进行验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.captcha20230305.models.VerifyCaptchaRequest;<br><span class="hljs-keyword">import</span> com.aliyun.captcha20230305.models.VerifyCaptchaResponse;<br><span class="hljs-keyword">import</span> com.aliyun.tea.TeaException;<br><span class="hljs-keyword">import</span> com.aliyun.teaopenapi.models.Config;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><br><span class="hljs-meta">@WebServlet(value = &quot;/yzm.action&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">yzmServletTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span> &#123;<br>    String captchaVerifyParam;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regYzm</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        <span class="hljs-comment">// 从请求体中获取参数  字节输入流  *****其它方法获取不到信息****</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> req.getReader() ) &#123;<br>            String line;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!line.isEmpty()) &#123; <span class="hljs-comment">// 跳过空行</span><br><span class="hljs-comment">//                    System.out.println(&quot;第&quot;+(flag++)+&quot;行line:&quot;+line);</span><br>                    <span class="hljs-comment">//具体验证信息参数</span><br>                    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">3</span>)&#123;<br>                        <span class="hljs-comment">//获取验证数据</span><br>                        captchaVerifyParam = line ;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    flag++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;captchaVerifyParam:&quot;</span>+captchaVerifyParam);<br>        <span class="hljs-comment">// ====================== 1. 初始化配置 ======================</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-comment">// 设置您的AccessKey ID 和 AccessKey Secret。</span><br>        <span class="hljs-comment">// getEnvProperty只是个示例方法，需要您自己实现AccessKey ID 和 AccessKey Secret安全的获取方式。</span><br>        config.accessKeyId = <span class="hljs-string">&quot;自己的AccessKey ID&quot;</span>;<br>        config.accessKeySecret = <span class="hljs-string">&quot;自己的AccessKey Secret&quot;</span>;<br>        <span class="hljs-comment">//设置请求地址</span><br>        config.endpoint = <span class="hljs-string">&quot;captcha.cn-shanghai.aliyuncs.com&quot;</span>;<br>        <span class="hljs-comment">// 设置连接超时为5000毫秒</span><br>        config.connectTimeout = <span class="hljs-number">5000</span>;<br>        <span class="hljs-comment">// 设置读超时为5000毫秒</span><br>        config.readTimeout = <span class="hljs-number">5000</span>;<br>        <span class="hljs-comment">// ====================== 2. 初始化客户端（实际生产代码中建议复用client） ======================</span><br>        com.aliyun.captcha20230305.<span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.aliyun.captcha20230305.Client(config);<br>        <span class="hljs-comment">// 创建APi请求</span><br>        <span class="hljs-type">VerifyCaptchaRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerifyCaptchaRequest</span>();<br>        request.captchaVerifyParam = captchaVerifyParam;<br>        <span class="hljs-comment">//对前端传来的数据  进行  验证    得到验证结果</span><br>        <span class="hljs-type">VerifyCaptchaResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.verifyCaptcha(request);<br>        <span class="hljs-comment">// ====================== 3. 发起请求） ======================</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 建议使用您系统中的日志组件，打印返回</span><br>            <span class="hljs-comment">// 获取验证码验证结果（请注意判空），将结果返回给前端。出现异常建议认为验证通过，优先保证业务可用，然后尽快排查异常原因。</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">captchaVerifyResult</span> <span class="hljs-operator">=</span> response.body.result.verifyResult; <span class="hljs-comment">//验证结果  true为通过，false为不通过</span><br>            jm.setCode(captchaVerifyResult); <span class="hljs-comment">//  验证  结果  true为通过，false为不通过</span><br>            System.out.println(<span class="hljs-string">&quot;I an person:&quot;</span>+captchaVerifyResult);<br>            System.out.println(response.body.getCode()); <span class="hljs-comment">// 表示验证情况  Success</span><br>        &#125; <span class="hljs-keyword">catch</span> (TeaException error) &#123;<br>            <span class="hljs-comment">// 建议使用您系统中的日志组件，打印异常</span><br>            <span class="hljs-comment">// 出现异常建议认为验证通过，优先保证业务可用，然后尽快排查异常原因。</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">captchaVerifyResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            jm.setCode(captchaVerifyResult);<br>            jm.setError(response.body.getCode()); <span class="hljs-comment">//错误信息</span><br>            System.out.println(<span class="hljs-string">&quot;Error message:&quot;</span>+jm.getError());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception _error) &#123;<br>            <span class="hljs-type">TeaException</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeaException</span>(_error.getMessage(), _error);<br>            <span class="hljs-comment">// 建议使用您系统中的日志组件，打印异常</span><br>            <span class="hljs-comment">// 出现异常建议认为验证通过，优先保证业务可用，然后尽快排查异常原因。</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">captchaVerifyResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            jm.setCode(captchaVerifyResult);<br>            jm.setError(response.body.getCode()); <span class="hljs-comment">//错误信息</span><br>            System.out.println(<span class="hljs-string">&quot;Error message:&quot;</span>+jm.getError());<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-对验证结果返回前端"><a href="#2-对验证结果返回前端" class="headerlink" title="2.对验证结果返回前端"></a>2.对验证结果返回前端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;op&quot;</span>); <span class="hljs-comment">//op=regFile</span><br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>(); <span class="hljs-comment">//用来保存要运行后的信息  并  返回到前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(op)) &#123;<br>                <span class="hljs-comment">// out.println( &quot;&#123;code:0,error:&#x27;没有op参数&#x27;&#125;&quot;  );</span><br>                jm.setError(<span class="hljs-string">&quot;op参数不能为空..&quot;</span>);<br>                writeJson(jm,resp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">///        反 射</span><br>            Method[] methods  = <span class="hljs-built_in">this</span>.getClass().getDeclaredMethods();<span class="hljs-comment">//取子类中的方法</span><br>            <span class="hljs-keyword">for</span> (Method m:methods)&#123;<br>                <span class="hljs-keyword">if</span> (  m.getName().equals(  op  )  ) &#123;  <span class="hljs-comment">// 判断有没有 regFile方法</span><br>                    m.invoke(<span class="hljs-built_in">this</span>, req,  resp);<span class="hljs-comment">//激活对应函数  regFile</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            jm.setError(  e.getMessage()  );<br>            writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);  <span class="hljs-comment">// 响应流的编码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-built_in">super</span>.service(req, resp);<br>    &#125;<br><br>    <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(  JsonModel jm , HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        out.println(  g.toJson(  jm  )); <span class="hljs-comment">///后端 把 运行情况 以json类型传出到前端</span><br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="保存后端情况类"><a href="#保存后端情况类" class="headerlink" title="保存后端情况类"></a>保存后端情况类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonModel</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-keyword">private</span> boolean code;  <span class="hljs-comment">//响应码  ：  0：表示失败  1：表示成功</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结-简单的网页集成人机验证功能的示例，使用了阿里云的滑块验证码系统来防止恶意登录操作-它通过触发滑块验证来增强表单安全性"><a href="#总结-简单的网页集成人机验证功能的示例，使用了阿里云的滑块验证码系统来防止恶意登录操作-它通过触发滑块验证来增强表单安全性" class="headerlink" title="总结:简单的网页集成人机验证功能的示例，使用了阿里云的滑块验证码系统来防止恶意登录操作,它通过触发滑块验证来增强表单安全性."></a>总结:简单的网页集成人机验证功能的示例，使用了阿里云的滑块验证码系统来防止恶意登录操作,它通过触发滑块验证来增强表单安全性.</h4>]]></content>
    
    
    <categories>
      
      <category>人机验证</category>
      
    </categories>
    
    
    <tags>
      
      <tag>servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端-后端交互</title>
    <link href="/2024/09/12/%E5%89%8D%E7%AB%AF-%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2024/09/12/%E5%89%8D%E7%AB%AF-%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h1 id="前端-后端交互（文件从前端上传阿里云OSS）"><a href="#前端-后端交互（文件从前端上传阿里云OSS）" class="headerlink" title="前端-后端交互（文件从前端上传阿里云OSS）"></a>前端-后端交互（文件从前端上传阿里云OSS）</h1><h2 id="前端fetch-发送-HTTP-请求："><a href="#前端fetch-发送-HTTP-请求：" class="headerlink" title="前端fetch 发送 HTTP 请求："></a>前端<code>fetch</code> 发送 HTTP 请求：</h2><h3 id="ES8中提供的新的异步API操作-，fetch，await-async："><a href="#ES8中提供的新的异步API操作-，fetch，await-async：" class="headerlink" title="ES8中提供的新的异步API操作 ，fetch，await async："></a>ES8中提供的新的异步API操作 ，fetch，await async：</h3><p>​在ES8 (ECMAScript 2017) 中，引入了 <code>async</code> 和 <code>await</code> 关键字，这是JavaScript中处理异步操作的一种新方法。这两个关键字旨在简化使用承诺（promises）执行异步操作时的语法。它们帮助开发者以一种更接近同步编程的方式来编写异步代码，从而提高代码的可读性和维护性。</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p><code>async</code> 函数是一种特殊类型的函数，用于定义异步函数，它始终返回一个 <code>Promise</code> 对象。<code>async</code> 函数内部可以使用 <code>await</code> 表达式，这有助于暂停函数的执行，直到等待的 <code>Promise</code> 解决</p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p><code>await</code> 关键字用于等待 <code>Promise</code> 解决，并暂停 <code>async</code> 函数的执行，直到 <code>Promise</code> 完成（resolved）。使用 <code>await</code> 可以以一种更线性、更同步的方式编写异步代码，从而避免回调地狱。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基于fetch的上传图片、文件到OSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> file =$(<span class="hljs-string">&quot;file&quot;</span>).<span class="hljs-property">files</span>; <span class="hljs-comment">//同名的file元素有多个</span></span><br><span class="language-javascript">            <span class="hljs-comment">//具体流程 第一步</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> formData=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(); <span class="hljs-comment">// 表示以表单形式构建参数</span></span><br><span class="language-javascript">            <span class="hljs-comment">// formData.append( &quot;file&quot;, file);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; file.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>+i, file[i]); <span class="hljs-comment">// 将文件对象添加到 formData 中</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 第四步 向后端传数据  ， 提交数据到后端</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> <span class="hljs-title function_">postData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url, data</span>) =&gt; &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-comment">//参数 ： 因为有图片，文件，所以不能以json格式传数据</span></span><br><span class="language-javascript">                        <span class="hljs-attr">body</span>: data</span><br><span class="language-javascript">                    &#125;);</span><br><span class="language-javascript">                    <span class="hljs-comment">// 前后端关键地方  前后端分隔的地方  暂停  等后端处理完前端传的数据  接收来自后端的数据  返回出去</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>(); <span class="hljs-comment">//将响应体解析为 JSON 格式</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//此result是一个包含了jsonmodel的promise对象</span></span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error sending POST request:&#x27;</span>, error);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            <span class="hljs-comment">//第二步   设置要调的Servlet 并传一个op判断调用的方法</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> apiUrl = <span class="hljs-string">&#x27;FileToOSSText.action?op=regFile&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//第三步   传递参数</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> pro = <span class="hljs-title function_">postData</span>( apiUrl , formData ); <span class="hljs-comment">//pro就是执行后的promise对象</span></span><br><span class="language-javascript">            <span class="hljs-comment">//第五步   接收后端数据  进行判断</span></span><br><span class="language-javascript">            pro.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">jsonobj</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (jsonobj.<span class="hljs-property">code</span> == <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;resultdiv&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;b&gt;文件上传成功&lt;/b&gt; &lt;br /&gt;链接地址:&quot;</span>+jsonobj.<span class="hljs-property">obj</span>;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&#x27;myImg&#x27;</span>).<span class="hljs-property">src</span>=jsonobj.<span class="hljs-property">obj</span> ;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;resultdiv&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;b&gt;文件上传失败&lt;/b&gt; 原因:&quot;</span> + jsonobj.<span class="hljs-property">error</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    选择需要上传的文件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reg()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultdiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>如果是图片则显示在下面:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span><span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后端Servlet-接收（使用容器-Apache-Tomcat）"><a href="#后端Servlet-接收（使用容器-Apache-Tomcat）" class="headerlink" title="后端Servlet 接收（使用容器 Apache Tomcat）"></a>后端Servlet 接收（使用容器 Apache Tomcat）</h2><h3 id="Java-Servlet"><a href="#Java-Servlet" class="headerlink" title="Java Servlet"></a><strong>Java Servlet</strong></h3><p>Java Servlet 是 Java EE 规范中的一部分，用于处理 Web 请求和响应。你可以编写自己的 Servlet 类来处理来自前端的 HTTP 请求，然后部署到 Servlet 容器（如 Apache Tomcat 或者 Jetty）中运行。</p><h3 id="1-接收前端发来的请求，调用doGet-方法，激活regFile-函数"><a href="#1-接收前端发来的请求，调用doGet-方法，激活regFile-函数" class="headerlink" title="1 接收前端发来的请求，调用doGet()方法，激活regFile()函数"></a>1 接收前端发来的请求，调用doGet()方法，激活regFile()函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.yc.Servlet.JsonModel;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;op&quot;</span>); <span class="hljs-comment">//取值 op=regFile</span><br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>(); <span class="hljs-comment">//用来保存要运行后的信息  并  返回到前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(op)) &#123;<br>                <span class="hljs-comment">// out.println( &quot;&#123;code:0,error:&#x27;没有op参数&#x27;&#125;&quot;  );</span><br>                jm.setCode(<span class="hljs-number">0</span>);<br>                jm.setError(<span class="hljs-string">&quot;op参数不能为空..&quot;</span>);<br>                writeJson(jm,resp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">///        反 射</span><br>            Method[] methods  = <span class="hljs-built_in">this</span>.getClass().getDeclaredMethods();<span class="hljs-comment">//取子类中的方法</span><br>            <span class="hljs-keyword">for</span> (Method m:methods)&#123;<br>                <span class="hljs-keyword">if</span> (  m.getName().equals(  op  )  ) &#123;  <span class="hljs-comment">// 判断有没有 regFile方法</span><br>                    m.invoke(<span class="hljs-built_in">this</span>, req,  resp);<span class="hljs-comment">//激活对应函数  regFile</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            jm.setCode(<span class="hljs-number">0</span>);<br>            jm.setError(  e.getMessage()  );<br>            writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);  <span class="hljs-comment">// 响应流的编码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-built_in">super</span>.service(req, resp);<span class="hljs-comment">//判断调用doGet()还是doPost()方法</span><br>    &#125;<br><br><span class="hljs-comment">//***** 最后要执行的函数   返回信息到前端</span><br>    <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(  JsonModel jm , HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        out.println(  g.toJson(  jm  )); <span class="hljs-comment">///后端 把 运行情况 以json类型传出到前端</span><br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-对文件进行处理，并传文件信息到上传工具"><a href="#2-对文件进行处理，并传文件信息到上传工具" class="headerlink" title="2 对文件进行处理，并传文件信息到上传工具"></a>2 对文件进行处理，并传文件信息到上传工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.yc.Servlet.JsonModel;<br><span class="hljs-keyword">import</span> com.yc.utils.BaseServlet;<br><span class="hljs-keyword">import</span> com.yc.utils.UploadToOSS;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.MultipartConfig;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.Part;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@WebServlet(&quot;/FileToOSSText.action&quot;)</span><br><span class="hljs-meta">@MultipartConfig(fileSizeThreshold = 1024*1024 , maxFileSize = 1024*1024*5 , maxRequestSize = 1024*1024*5*5)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileToOSSText</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regFile</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        Collection&lt;Part&gt; parts = req.getParts(); <span class="hljs-comment">// 获取所有部分</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (Part part : parts) &#123;<br>                <span class="hljs-keyword">if</span> (part.getContentType() != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 检查部分是否为文件</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> part.getSubmittedFileName(); <span class="hljs-comment">// 获取文件名</span><br>                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">fileContent</span> <span class="hljs-operator">=</span> part.getInputStream(); <span class="hljs-comment">// 获取文件内容的输入流</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> UploadToOSS.uploadFileOSS( fileName ,  fileContent );<span class="hljs-comment">//调用上传到OSS的函数</span><br>                    <span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;0&quot;</span>.equals(url) )&#123;  <span class="hljs-comment">//上传失败</span><br>                        jm.setCode(<span class="hljs-number">0</span>);<br>                        jm.setError(<span class="hljs-string">&quot;上传失败。。。&quot;</span>);<br>                        <span class="hljs-built_in">super</span>.writeJson( jm , resp );<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;     <span class="hljs-comment">//上传成功</span><br>                        jm.setObj(url);<br>                        jm.setCode(<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(ex);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.writeJson(jm,resp);<br>            System.out.println(<span class="hljs-string">&quot;OSS close Success&quot;</span>);<br>            UploadToOSS.close(); <span class="hljs-comment">// 最终，无论上传成功还是失败，都关闭OSS客户端实例以释放资源。</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-上传文件到阿里云OSS，并返回URL-访问域名"><a href="#3-上传文件到阿里云OSS，并返回URL-访问域名" class="headerlink" title="3 上传文件到阿里云OSS，并返回URL(访问域名)"></a>3 上传文件到阿里云OSS，并返回URL(访问域名)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> com.aliyun.oss.common.auth.CredentialsProviderFactory;<br><span class="hljs-keyword">import</span> com.aliyun.oss.common.auth.EnvironmentVariableCredentialsProvider;<br><span class="hljs-keyword">import</span> com.aliyuncs.exceptions.ClientException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadToOSS</span> &#123;<br><br><span class="hljs-comment">//OSS客户端实例</span><br>    <span class="hljs-keyword">static</span>  <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uploadFileOSS</span><span class="hljs-params">(String fileKey, InputStream inputStream)</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>        <span class="hljs-comment">// 阿里云OSS服务的Endpoint。  服务的访问域名，指定了阿里云OSS服务的网络节点</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://oss-cn-beijing.aliyuncs.com&quot;</span>;<br>        <span class="hljs-comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。</span><br>        <span class="hljs-type">EnvironmentVariableCredentialsProvider</span> <span class="hljs-variable">credentialsProvider</span> <span class="hljs-operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();<br>        <span class="hljs-comment">// 你的阿里云OSS存储桶名称。填写Bucket名称，</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xin-qiu&quot;</span>;<br>        <span class="hljs-comment">// OSS中的文件键（Key），即上传后的文件名。</span><br><span class="hljs-comment">//        String fileKey = &quot;qqq.jpg&quot;; // 保存到OSS的文件名</span><br>        <span class="hljs-comment">// 本地系统中的文件路径，用于找到你想上传的文件。</span><br><span class="hljs-comment">//        String filePath = &quot;C:/Users/DELL/OneDrive/桌面/图片/二次元/qqq.jpg&quot;; // 本地文件路径</span><br><br>        <span class="hljs-comment">// 使用OSSClientBuilder构建一个OSS客户端实例。</span><br>        ossClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint,credentialsProvider);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个文件输入流，用于读取本地文件。</span><br><span class="hljs-comment">//            FileInputStream inputStream = new FileInputStream(filePath);</span><br>            <span class="hljs-comment">// 调用OSS客户端的putObject方法上传文件。传入存储桶名、文件键和文件输入流。</span><br>            ossClient.putObject(bucketName, fileKey, inputStream);<br>            System.out.println(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            <span class="hljs-comment">//返回出去并保存到数据库 ： https://xin-qiu.oss-cn-beijing.aliyuncs.com/cx.png</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;https:/xin-qiu.oss-cn-beijing.aliyuncs.com/&quot;</span>+fileKey;<span class="hljs-comment">//上传成功 把 访问域名返回出去</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件未找到：&quot;</span> + e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;  <span class="hljs-comment">//失败返回 0</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 最终，无论上传成功还是失败，都关闭OSS客户端实例以释放资源。</span><br>        ossClient.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-最后调用BaseServlet类中的-writeJson-函数把结果以json格式传到前端"><a href="#4-最后调用BaseServlet类中的-writeJson-函数把结果以json格式传到前端" class="headerlink" title="4 最后调用BaseServlet类中的 writeJson() 函数把结果以json格式传到前端"></a>4 最后调用BaseServlet类中的 writeJson() 函数把结果以json格式传到前端</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//***** 最后要执行的函数   返回信息到前端</span><br>   <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeJson</span>(<span class="hljs-params">  JsonModel jm , HttpServletResponse resp</span>) throws IOException</span> &#123;<br>       resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>       PrintWriter <span class="hljs-keyword">out</span> = resp.getWriter();<br>       Gson g = <span class="hljs-keyword">new</span> Gson();<br>       <span class="hljs-keyword">out</span>.println(  g.toJson(  jm  )); <span class="hljs-comment"><span class="hljs-doctag">///</span>后端 把 运行情况 以json类型传出到前端</span><br>       <span class="hljs-keyword">out</span>.flush();<br>       <span class="hljs-keyword">out</span>.close();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="保存运行情况类"><a href="#保存运行情况类" class="headerlink" title="保存运行情况类"></a>保存运行情况类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonModel</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;  <span class="hljs-comment">//响应码  ：  0：表示失败  1：表示成功</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> error;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.80<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端交互</category>
      
    </categories>
    
    
    <tags>
      
      <tag>servlet</tag>
      
      <tag>OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2024/09/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="策略模式（案例：四则运算-）"><a href="#策略模式（案例：四则运算-）" class="headerlink" title="策略模式（案例：四则运算 +  -  *  &#x2F;  ）"></a>策略模式（案例：四则运算 +  -  *  &#x2F;  ）</h2><p>​策略模式（Strategy Pattern）是一种行为设计模式，用来定义一系列的算法，把它们一个个封装起来，并使它们可以相互替换。该模式使得算法可以独立于使用它的客户端而变化，也即算法可以独立于它们的上下文进行变化。策略模式是一种很常用的设计模式，广泛应用于需要从多种算法或业务规则中选择一种算法或规则的系统中。</p><h3 id="目的和优势："><a href="#目的和优势：" class="headerlink" title="目的和优势："></a>目的和优势：</h3><ol><li><strong>封装变化</strong>：将算法的变化封装在各个策略类中，而不是在使用算法的环境中。</li><li><strong>避免使用多重条件选择语句</strong>：策略模式提供了一种用条件语句选择所需算法的替代方法。</li><li><strong>易于扩展</strong>：添加一个新的策略只需实现一个接口即可，无需修改现有代码。</li><li><strong>符合开闭原则</strong>：系统可以在不修改原有代码的情况下引入新的算法。</li></ol><h3 id="结构组成："><a href="#结构组成：" class="headerlink" title="结构组成："></a>结构组成：</h3><p>策略模式主要包括三个角色：</p><ol><li><strong>环境类（Context）</strong>：用来操作策略的上下文环境，它是客户端使用策略的入口。</li><li><strong>抽象策略类（Strategy Interface）</strong>：定义所有支持的算法的公共接口。Context使用这个接口来调用某个Concrete Strategy定义的算法。</li><li><strong>具体策略类（Concrete Strategy）</strong>：实现策略接口，提供具体的算法实现。</li></ol><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ol><li><strong>需要在运行时选择算法的行为</strong>：当系统需要根据不同的情况使用不同的算法时，可以使用策略模式。例如，根据不同的支付方式选择不同的支付策略。</li><li><strong>避免使用大量的条件语句</strong>：如果在代码中使用大量的条件语句来选择不同的行为，可以考虑使用策略模式。策略模式可以将每种行为封装在单独的策略对象中，从而简化代码并提高可读性。</li><li><strong>算法的实现可能频繁变化</strong>：如果系统中的算法实现可能经常变化，而且这种变化不希望影响到客户端代码，可以使用策略模式。策略模式将算法的实现与客户端代码分离，使得可以轻松地添加、删除或替换策略而不影响客户端代码。</li><li><strong>需要通过继承或组合来扩展算法的行为</strong>：策略模式可以通过继承或组合来扩展算法的行为。通过定义新的策略对象，可以轻松地添加新的行为，而不影响现有的代码。</li></ol><p>总之，策略模式适用于需要在运行时选择算法的行为，并且希望通过封装算法和消除大量的条件语句来提高代码的可读性和可维护性的情况。</p><h4 id="抽象策略类："><a href="#抽象策略类：" class="headerlink" title="抽象策略类："></a>抽象策略类：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 抽象策略类</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br>     <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doOperation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>; <span class="hljs-comment">//算法的具体实现</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="具体策略类："><a href="#具体策略类：" class="headerlink" title="具体策略类："></a>具体策略类：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//加法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">addOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    int doOperation(int x,int y) &#123;<br>        <span class="hljs-keyword">return</span> x+y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//减法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">subOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x-y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//乘法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mulOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x*y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//除法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">divOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x/y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环境类："><a href="#环境类：" class="headerlink" title="环境类："></a>环境类：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//环境类  保存具体策略类的具体实例 并  提供一个方法调用具体策略的具体算法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationContext</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  Operation strategy; <span class="hljs-comment">//保存具体策略</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> x;  <span class="hljs-comment">//要进行运算的参数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> y;<span class="hljs-comment">//要进行运算的参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperationContext</span><span class="hljs-params">(Operation strategy,<span class="hljs-keyword">double</span> x,<span class="hljs-keyword">double</span> y)</span> </span>&#123;  <span class="hljs-comment">//构造方法</span><br>        <span class="hljs-keyword">this</span>.strategy = strategy;<br>        <span class="hljs-keyword">this</span>.x=x;<br>        <span class="hljs-keyword">this</span>.y=y;<br>    &#125;<br>    <span class="hljs-comment">//返回计算后的结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">executeOperation</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> strategy.<span class="hljs-title">doOperation</span><span class="hljs-params">(x,y)</span></span>;  <span class="hljs-comment">//策略中的具体算法，对数据进行具体计算</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端使用："><a href="#客户端使用：" class="headerlink" title="客户端使用："></a>客户端使用：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">app</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br><br>        OperationContext context;<br>        <span class="hljs-comment">//启用加法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> addOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;加法:x+y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到减法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> subOperationStrategy(),<span class="hljs-number">8.0</span>,<span class="hljs-number">4.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;减法:x-y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到乘法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> mulOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;乘法:x*y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到除法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> divOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;除法:x/y=&quot;</span>+context.executeOperation());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>职责链模式</title>
    <link href="/2024/09/11/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AF%B7%E5%81%87%E5%AE%A1%E6%89%B9%E6%9D%83%E9%99%90%EF%BC%89/"/>
    <url>/2024/09/11/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AF%B7%E5%81%87%E5%AE%A1%E6%89%B9%E6%9D%83%E9%99%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="职责链模式（案例：请假审批权限：小组长-经理-…-）"><a href="#职责链模式（案例：请假审批权限：小组长-经理-…-）" class="headerlink" title="职责链模式（案例：请假审批权限：小组长-&gt;经理-&gt;….）"></a>职责链模式（案例：请假审批权限：小组长-&gt;经理-&gt;….）</h2><p>​在软件设计中，职责链模式（Chain of Responsibility Pattern）是一种行为设计模式，用于将请求的发送者和接收者解耦。在Java中实现职责链模式通常涉及创建多个处理对象（handler），这些对象构成一条链，每个处理对象都有机会处理请求或将其传递给链中的下一个对象。</p><h3 id="职责链模式的核心组成部分："><a href="#职责链模式的核心组成部分：" class="headerlink" title="职责链模式的核心组成部分："></a>职责链模式的核心组成部分：</h3><ol><li><strong>处理器接口（Handler Interface）</strong>：定义了处理请求的方法。所有的具体处理器都必须实现这个接口。</li><li><strong>具体处理器（Concrete Handlers）</strong>：实现处理器接口的类，每个类都处理它能处理的请求，并决定是否将请求传递到链上的下一个处理器。</li><li><strong>客户端（Client）</strong>：启动请求传递到职责链的起点</li></ol><h4 id="1-创建处理器"><a href="#1-创建处理器" class="headerlink" title="1. 创建处理器"></a>1. 创建处理器</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Leader</span> supirior; <span class="hljs-comment">//上级领导  即职责链</span><br><br><span class="hljs-comment">//抽象方法  请假天数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">handleRequest</span>(int days);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br><span class="hljs-comment">// 即职责链       name:本人    supirior:上级领导</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Leader</span> supirior) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">supirior</span> = supirior;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSupirior</span>(<span class="hljs-params"><span class="hljs-title class_">Leader</span> supirior</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">supirior</span> = supirior;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span> <span class="hljs-title function_">getSupirior</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> supirior;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-定义具体处理器"><a href="#2-定义具体处理器" class="headerlink" title="2. 定义具体处理器"></a>2. 定义具体处理器</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//小组长处理</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Grouper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span></span>&#123;<br>    public <span class="hljs-type">Grouper</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">//请假的具体实现</span><br>    public void handleRequest(int days) &#123;<br>        <span class="hljs-keyword">if</span>(days &lt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">System</span>.out.println( <span class="hljs-string">&quot;小组长：&quot;</span>+<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;批准请假：&quot;</span>+days+<span class="hljs-string">&quot;天！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getSupirior()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//权限不够 则推给上级领导处理</span><br>                <span class="hljs-keyword">this</span>.getSupirior().handleRequest(  days );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;请假天数超过权限&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//经理处理</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span></span>&#123;<br>    public <span class="hljs-type">Manager</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">//请假的具体实现</span><br>    public void handleRequest(int days) &#123;<br>        <span class="hljs-keyword">if</span>(days &lt;= <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">System</span>.out.println( <span class="hljs-string">&quot;经理：&quot;</span>+<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;批准请假：&quot;</span>+days+<span class="hljs-string">&quot;天！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getSupirior()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//权限不够 则推给上级领导处理</span><br>                <span class="hljs-keyword">this</span>.getSupirior().handleRequest(  days );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;请假天数超过权限！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-客户端使用"><a href="#3-客户端使用" class="headerlink" title="3. 客户端使用"></a>3. 客户端使用</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">//开闭原则 ： 对修改关闭   对扩展开发</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> App &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//组装职责链</span><br>        Leader grouper <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Grouper(<span class="hljs-string">&quot;小组长张三&quot;</span>);<br>        <span class="hljs-comment">//小组长上加经理</span><br>        Leader manager <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Manager(<span class="hljs-string">&quot;经理李四&quot;</span>);<br>        grouper.setSupirior(manager);<br>        <span class="hljs-comment">//经理上加总经理</span><br>        <span class="hljs-operator">/*</span><br>        Leader generalManager <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> GeneralManager(<span class="hljs-string">&quot;总经理lili&quot;</span>);<br>        manager.setSupirior(generalManager);<br><br>        <span class="hljs-comment">//总经理上加老板</span><br>        Leader boss <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Boss(<span class="hljs-string">&quot;老板小明&quot;</span>);<br>        generalManager.setSupirior(boss);<br><span class="hljs-operator">*/</span><br><span class="hljs-comment">//请假3天</span><br>        grouper.handleRequest(<span class="hljs-number">3</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2024/09/11/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6)/"/>
    <url>/2024/09/11/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6)/</url>
    
    <content type="html"><![CDATA[<h2 id="观察者模式（案例：十进制转二进制、八进制、十六进制"><a href="#观察者模式（案例：十进制转二进制、八进制、十六进制" class="headerlink" title="观察者模式（案例：十进制转二进制、八进制、十六进制)"></a>观察者模式（案例：十进制转二进制、八进制、十六进制)</h2><p>​观察者模式是一种常用的设计模式，属于行为型模式。它允许一个对象（称为“主题”或“被观察者”）维持一系列依赖于它的对象（称为“观察者”），当主题的状态发生变化时，会自动通知所有观察者对象，使它们能够自动更新自己。</p><h3 id="观察者模式的组成："><a href="#观察者模式的组成：" class="headerlink" title="观察者模式的组成："></a>观察者模式的组成：</h3><ol><li><strong>Subject（主题）</strong> - 维护一组观察者，提供用于增加和删除观察者的方法。</li><li><strong>Observer（观察者）</strong> - 所有潜在的更新对象必须实现的接口。</li><li><strong>BinaryObserver（具体观察者，二进制）</strong> - 当接收到主题变化的通知时，执行相应的动作。</li><li><strong>OctalObserver（具体观察者，八进制）</strong> - 当接收到主题变化的通知时，执行相应的动作。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>当一个对象的改变需要同时改变其他对象，而且它不知道具体有哪些对象需要改变时。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这两者封装在独立的对象中以使它们可以各自独立地改变和复用。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//待观察的主题：  状态</span><br><span class="hljs-comment">//一旦主题中的状态发生变化， 就要通知所有观察者，你们要运行(   进制转换   )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> &#123;<br><br>    <span class="hljs-comment">//2 所有的转换器  观察的状态是state</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> state;  <span class="hljs-comment">//此属性可以是一个复杂的对象</span><br><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <span class="hljs-comment">//观察者（进制转换器）的集合</span><br><br>    <span class="hljs-comment">//1 将转换器保存到  转换器集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span>(<span class="hljs-params">Observer Observer</span>)</span>&#123;<br>        <span class="hljs-comment">//将观察者保存到集合中 （ 将观察者注册到主题中来  ）</span><br>        observers.<span class="hljs-keyword">add</span>(Observer);<br>    &#125;<br>    <span class="hljs-comment">//3 状态一发生变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> state</span>)</span>&#123;<br>        <span class="hljs-comment">//状态变化</span><br>        <span class="hljs-keyword">this</span>.state = state;<br>        <span class="hljs-comment">//通知观察者状态变了 ，请运算</span><br>        <span class="hljs-comment">//4  循环所有的转换器（观察者） ，调用转换器的转换方法 update() 输出对应的进制的值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;observers.size();i++)&#123;<br>            Observer observer = observers.<span class="hljs-keyword">get</span>(i); <span class="hljs-comment">//提取每个转换器（观察者）</span><br>            observer.update(); <span class="hljs-comment">//调用每个转换器（观察者）的转换方法</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getState</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> Subject subject;  <span class="hljs-comment">//待观察的主题</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span>; <span class="hljs-comment">//  转换方法</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pf">//二进制的转换器 （二进制的观察者）<br>public class BinaryObserver extends Observer&#123;<br><br>    public BinaryObserver(Subject subject) &#123;<br>        super.subject=subject;  //当前二进制的观察者观察了谁 （主题）<br>        subject.register( this  );//主题中也要知道谁 （观察者/转换器） 观察了自己<br>    &#125;<br><br>    @Override<br>    public void update() &#123;<br>        //转换开始 取出Subject中的<span class="hljs-keyword">state</span>，转为二进制<br>        int <span class="hljs-keyword">state</span> = super.subject.getState(); //先取出变化后的状态<br>        String str = Integer.<span class="hljs-keyword">to</span>BinaryString(<span class="hljs-keyword">state</span>);<br>        System.<span class="hljs-keyword">out</span>.println(  <span class="hljs-string">&quot;原始值：&quot;</span>+<span class="hljs-keyword">state</span>+<span class="hljs-string">&quot;转成二进制的结果为：&quot;</span>+str  );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">//八进制的转换器 （八进制的观察者）<br>public class OctalObserver extends Observer&#123;<br>    public OctalObserver(Subject subject) &#123;<br>        super.subject=subject;  //当前八进制的观察者观察了谁 （主题）<br>        subject.register( this  );//主题中也要知道谁 （观察者/转换器） 观察了自己<br>    &#125;<br><br>    @Override<br>    public void update() &#123;<br>        //转换开始 取出Subject中的<span class="hljs-keyword">state</span>，转为八进制<br>        int <span class="hljs-keyword">state</span> = super.subject.getState(); //先取出变化后的状态<br>        String str = Integer.<span class="hljs-keyword">to</span>OctalString( <span class="hljs-keyword">state</span> );<br>        System.<span class="hljs-keyword">out</span>.println(  <span class="hljs-string">&quot;原始值：&quot;</span>+<span class="hljs-keyword">state</span>+<span class="hljs-string">&quot;转成八进制的结果为：&quot;</span>+str  );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">//1 带观察者的主题</span><br>        <span class="hljs-title class_">Subject</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br><br>        <span class="hljs-comment">//2 创建一些观察者（转换器） 并注册这些观察者到主题中</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">OctalObserver</span>(  subject  );<span class="hljs-comment">//八进制</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryObserver</span>(  subject  );<span class="hljs-comment">//二进制</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HexObserver</span>( subject ); <span class="hljs-comment">//十六进制</span><br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;更改状态值：&quot;</span>);<br>        subject.<span class="hljs-title function_">setState</span>(  <span class="hljs-number">10</span>  );<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工客服聊天（WebSocket）</title>
    <link href="/2024/09/11/%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E8%81%8A%E5%A4%A9/"/>
    <url>/2024/09/11/%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E8%81%8A%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="人工客服聊天（WebSocket）"><a href="#人工客服聊天（WebSocket）" class="headerlink" title="人工客服聊天（WebSocket）"></a>人工客服聊天（WebSocket）</h1><h3 id="技术："><a href="#技术：" class="headerlink" title="技术："></a>技术：</h3><h3 id="前端-vue、axios"><a href="#前端-vue、axios" class="headerlink" title="前端: vue、axios"></a>前端: vue、axios</h3><h4 id="后端：tomcat、servlet、redis数据库"><a href="#后端：tomcat、servlet、redis数据库" class="headerlink" title="后端：tomcat、servlet、redis数据库"></a>后端：tomcat、servlet、redis数据库</h4><h3 id="WebSocket介绍："><a href="#WebSocket介绍：" class="headerlink" title="WebSocket介绍："></a>WebSocket介绍：</h3><h4 id="WebSocket-是一种在单个-TCP-连接上进行全双工通信的协议。与传统的-HTTP-请求-响应模型不同，WebSocket-允许服务器和客户端之间进行实时的、低延迟的双向数据传输。"><a href="#WebSocket-是一种在单个-TCP-连接上进行全双工通信的协议。与传统的-HTTP-请求-响应模型不同，WebSocket-允许服务器和客户端之间进行实时的、低延迟的双向数据传输。" class="headerlink" title="WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。与传统的 HTTP 请求-响应模型不同，WebSocket 允许服务器和客户端之间进行实时的、低延迟的双向数据传输。"></a>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。与传统的 HTTP 请求-响应模型不同，WebSocket 允许服务器和客户端之间进行实时的、低延迟的双向数据传输。</h4><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h3><ul><li><strong>实时聊天应用</strong>：如客服聊天、社交聊天。</li><li><strong>实时通知和提醒</strong>：如推送通知、股票价格更新。</li><li><strong>协作工具</strong>：如在线文档编辑、多人游戏。</li><li><strong>实时数据流</strong>：如直播、在线游戏、物联网数据传输。</li></ul><h3 id="前端实现-WebSocket"><a href="#前端实现-WebSocket" class="headerlink" title="前端实现 WebSocket:"></a>前端实现 WebSocket:</h3><h5 id="前端代码-用户端、客服端-："><a href="#前端代码-用户端、客服端-：" class="headerlink" title="前端代码(用户端、客服端)："></a>前端代码(用户端、客服端)：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br><br>            <span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">//用户发的消息</span><br>            <span class="hljs-attr">chatMessage</span>:[], <span class="hljs-comment">//聊天内容</span><br><br>            <span class="hljs-attr">protocol</span>:<span class="hljs-string">&#x27;&#x27;</span>,     <span class="hljs-comment">//当前页面的协议</span><br>            <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;&#x27;</span>,        <span class="hljs-comment">//服务器的主机名或 IP 地址主机和端口</span><br>            <span class="hljs-attr">endpoint</span>:<span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-comment">//端点</span><br>            <span class="hljs-attr">contextPath</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//项目名</span><br><br>        &#125;,<br>        <span class="hljs-attr">methods</span>:&#123;<br><br>            <span class="hljs-comment">//WebSocket 客服聊天  初始化参数  建立连接</span><br>            <span class="hljs-title function_">initWebSocket</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// 获取当前页面的协议、主机和端口</span><br>                <span class="hljs-comment">//const protocol = window.location.protocol === &#x27;https:&#x27; ? &#x27;wss:&#x27; : &#x27;ws:&#x27;;</span><br>                <span class="hljs-keyword">const</span> protocol = <span class="hljs-variable language_">this</span>.<span class="hljs-property">protocol</span>;<br><br>                <span class="hljs-comment">//const host = window.location.host;</span><br>                <span class="hljs-keyword">const</span> host = <span class="hljs-variable language_">this</span>.<span class="hljs-property">host</span>;<br>                <span class="hljs-comment">//考虑nginx反向代理没有端口的问题</span><br>                <span class="hljs-comment">//const host = window.location.host.includes(&#x27;:&#x27;) ? window.location.host : window.location.host + &#x27;:8080&#x27;;</span><br><br>                <span class="hljs-comment">//const endpoint = &#x27;/shop_war/echo&#x27;;</span><br>                <span class="hljs-comment">/*  ******客服端连接用户的端点user    用户连接客服端的端点admin **********   */</span><br>                <span class="hljs-comment">/*  ****  当前为客服端   用户端的话把user改为admin ***** */</span><br>                <span class="hljs-keyword">const</span> endpoint = <span class="hljs-variable language_">this</span>.<span class="hljs-property">endpoint</span>+ <span class="hljs-variable language_">this</span>.<span class="hljs-property">contextPath</span> +<span class="hljs-string">&#x27;/user&#x27;</span>;<br>                <span class="hljs-comment">//const endpoint = &#x27;/shop/echo&#x27;;</span><br><br>                <span class="hljs-comment">// 动态生成 WebSocket 的 URL  </span><br>                <span class="hljs-comment">//ws://localhost:8080/user</span><br>                <span class="hljs-keyword">const</span> wsUrl = <span class="hljs-string">`<span class="hljs-subst">$&#123;protocol&#125;</span>://<span class="hljs-subst">$&#123;host&#125;</span>:<span class="hljs-subst">$&#123;endpoint&#125;</span>`</span>;<br><br>                <span class="hljs-comment">// 创建 WebSocket 连接</span><br>                <span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(wsUrl);<br><br>                ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket 连接已经建立。&#x27;</span>);<br>                    <span class="hljs-comment">// ws.send(&#x27;Hello, server!&#x27;);</span><br>                &#125;;<br><span class="hljs-comment">//  ***** 接收到websocket服务器端点的通知  </span><br>                ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到服务器消息：&#x27;</span>, event.<span class="hljs-property">data</span>);<br>                    <span class="hljs-comment">//该刷新了</span><br>                    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">data</span>)&#123;<br>                        <span class="hljs-comment">// alert(&quot;获取到了服务器的消息&quot;);  刷新数据 即获取客服端的消息</span><br>                        <span class="hljs-comment">// ***** 从redis数据库中去读取聊天内容</span><br>                        app.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>                            <span class="hljs-comment">// alert(&quot;获取服务端的消息&quot;+result.data.obj);</span><br>                            <span class="hljs-comment">// 确保 this.chatMessage 已经是一个数组</span><br>                            <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">chatMessage</span>)) &#123;<br>                            app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span> = [];<br>                            &#125;<br>                            <span class="hljs-keyword">let</span> obj = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>;<span class="hljs-comment">//获取到聊天内容</span><br>                            obj.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span> &#123;<br>                            app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span>.<span class="hljs-title function_">push</span>(product);<br>                            &#125;);<br>                        &#125;)<br>                    &#125;<br>                &#125;;<br><br>                ws.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;WebSocket 连接出现错误：&#x27;</span>, event);<br>                &#125;;<br><br>                ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket 连接已经关闭。&#x27;</span>);<br>                &#125;;<br><br>                <span class="hljs-comment">//关闭窗口调用</span><br>                <span class="hljs-variable language_">window</span>.<span class="hljs-property">onbeforeunload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                    app.<span class="hljs-property">$data</span>.<span class="hljs-property">ws</span>.<span class="hljs-title function_">close</span>();<br>                &#125;;<br><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span> = ws;<br>            &#125;,<br>            <span class="hljs-comment">//获取 要建立连接的 初始化参数</span><br>            <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//用于初始化websocket</span><br>                axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;websocket.action?op=getServerInfo&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>                    <span class="hljs-keyword">if</span> (result.<span class="hljs-property">data</span>.<span class="hljs-property">code</span>==<span class="hljs-number">0</span>)&#123;<br><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">protocol</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">protocol</span>;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">host</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">host</span>;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">endpoint</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">port</span>;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">contextPath</span> = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">contextPath</span>;<br>                        <span class="hljs-comment">//动态初始化websocket的url，并建立连接，用来提醒该刷新消息了</span><br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initWebSocket</span>();<br>                    &#125;<br>                &#125;)<br>            &#125;,<br>            <span class="hljs-comment">//发送 消息 到 服务器</span><br>            <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">let</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(   );<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span> == <span class="hljs-literal">null</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span> == <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请先输入内容&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span>);<br>                params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>                axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;websocket.action?op=setMessage&quot;</span>,params).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>                    <span class="hljs-keyword">let</span> jm = result.<span class="hljs-property">data</span>;<br>                    <span class="hljs-keyword">if</span> (jm.<span class="hljs-property">code</span> == <span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>                            app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span> = [];<br>                            <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">chatMessage</span>)) &#123;<br>                                app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span> = [];<br>                            &#125;<br>                            <span class="hljs-keyword">let</span> obj = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>;<br>                            obj.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span> &#123;<br>                                app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span>.<span class="hljs-title function_">push</span>(product);<br>                            &#125;);<br>                        &#125;)<br>                    &#125;<br><br>                &#125;)<br>            &#125;,<br>            <span class="hljs-comment">//获取  服务端的消息  后调用</span><br>            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">let</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>();<br>                <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;websocket.action?op=getMessage&quot;</span>, params)<br>                    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>                        <span class="hljs-comment">// 假设服务器返回的数据结构如下：</span><br>                        <span class="hljs-comment">// &#123; data: &#123; code: 0, obj: &#123;...&#125; &#125; &#125;</span><br>                        <span class="hljs-keyword">return</span> response;<br>                    &#125;)<br>                    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取数据时发生错误：&#x27;</span>, error);<br>                        <span class="hljs-keyword">throw</span> error;<br>                    &#125;);<br>            &#125;,<br>            <span class="hljs-comment">//初始内容并渲染  即获取聊天记录 原先的聊天内容</span><br>            <span class="hljs-title function_">initContent</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>                    app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span> = [];<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">chatMessage</span>)) &#123;<br>                        app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span> = [];<br>                    &#125;<br>                    <span class="hljs-keyword">let</span> obj = result.<span class="hljs-property">data</span>.<span class="hljs-property">obj</span>;<br>                    obj.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span> &#123;<br>                        app.<span class="hljs-property">$data</span>.<span class="hljs-property">chatMessage</span>.<span class="hljs-title function_">push</span>(product);<br>                    &#125;);<br>                &#125;)<br>            &#125;,<br>        &#125;,<br>        <span class="hljs-comment">//选择挂载点为mounted  vue生命周期调用</span><br>        <span class="hljs-attr">mounted</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>            axios.<span class="hljs-title function_">all</span>(  [ <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>(),<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initContent</span>() ] );<br>        &#125;,<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h4 id="WebSocket-服务器端点-客服端、用户端连接类"><a href="#WebSocket-服务器端点-客服端、用户端连接类" class="headerlink" title="WebSocket 服务器端点(客服端、用户端连接类):"></a>WebSocket 服务器端点(客服端、用户端连接类):</h4><p>基本的 WebSocket 生命周期事件处理（连接、消息接收、关闭、错误）以及一个方法来向客户端发送消息。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>// ***** 客服端 的 端点   用户端的话 把 <span class="hljs-keyword">admin</span>改成<span class="hljs-keyword">user</span><br>@ServerEndpoint(&quot;/admin&quot;)<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> adminEchoServer &#123;<br>    private static <span class="hljs-keyword">Session</span> <span class="hljs-keyword">session</span>;<br><br>    @OnOpen<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onOpen(<span class="hljs-keyword">Session</span> <span class="hljs-keyword">session</span>) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;WebSocket 连接已经建立。&quot;);<br>        adminEchoServer.<span class="hljs-keyword">session</span> = <span class="hljs-keyword">session</span>;<br>    &#125;<br><br>    @OnMessage<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onMessage(String message, <span class="hljs-keyword">Session</span> <span class="hljs-keyword">session</span>) throws IOException &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;收到客户端消息：&quot; + message);<br>        //<span class="hljs-keyword">session</span>.getBasicRemote().sendText(&quot;服务器收到消息：&quot; + message);<br>    &#125;<br><br>    @OnClose<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onClose() &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;WebSocket 连接已经关闭。&quot;);<br>    &#125;<br><br>    @OnError<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onError(Throwable t) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;WebSocket 连接出现错误：&quot; + t.getMessage());<br>    &#125;<br>// ******  发送 通知  告诉前端需要刷新了 即前端需要去redis数据库中读取消息了<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> send(String message) throws IOException &#123;<br>        <span class="hljs-keyword">session</span>.getBasicRemote().sendText(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="聊天内容具体操作类："><a href="#聊天内容具体操作类：" class="headerlink" title="聊天内容具体操作类："></a>聊天内容具体操作类：</h4><ul><li><h5 id="获取初始化信息-建立websocket连接"><a href="#获取初始化信息-建立websocket连接" class="headerlink" title="获取初始化信息  建立websocket连接"></a>获取初始化信息  建立websocket连接</h5></li><li><h5 id="发送消息存到redis，通知user或者admin"><a href="#发送消息存到redis，通知user或者admin" class="headerlink" title="发送消息存到redis，通知user或者admin"></a>发送消息存到redis，通知user或者admin</h5></li><li><h5 id="从redis中获取消息"><a href="#从redis中获取消息" class="headerlink" title="从redis中获取消息"></a>从redis中获取消息</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@WebServlet(value = &quot;/websocket.action&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-comment">////获取初始化信息  建立连接</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getServerInfo</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Map&lt;String, String&gt; serverInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> request.isSecure() ? <span class="hljs-string">&quot;wss&quot;</span> : <span class="hljs-string">&quot;ws&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> request.getServerName();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> request.getServerPort();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> request.getContextPath();<br><br>        serverInfo.put(<span class="hljs-string">&quot;protocol&quot;</span>, protocol);<br>        serverInfo.put(<span class="hljs-string">&quot;host&quot;</span>, host);<br>        serverInfo.put(<span class="hljs-string">&quot;port&quot;</span>, String.valueOf(port));<br>        serverInfo.put(<span class="hljs-string">&quot;contextPath&quot;</span>, contextPath);<br><br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        jm.setCode(<span class="hljs-number">1</span>);<br>        jm.setObj(serverInfo);<br>        writeJson(jm,response);<br>    &#125;<br>    <span class="hljs-comment">//  发送消息 存到  redis数据库中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        <span class="hljs-comment">// name 表示 用户/客服  user/admin</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;content&quot;</span>);<br>        <span class="hljs-comment">//连接redis</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">// 当前时间戳</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">currentTimestamp</span> <span class="hljs-operator">=</span> System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br>        <span class="hljs-comment">// **** 存  redis  数据库</span><br>        <span class="hljs-comment">// ****添加新成员到有序集合Sorted Set  格式: content_websocket   时间戳   用户姓名:内容</span><br>        jedis.zadd(<span class="hljs-string">&quot;content_websocket&quot;</span>, currentTimestamp, name+<span class="hljs-string">&quot;:&quot;</span>+content);<br>        jm.setCode(<span class="hljs-number">1</span>);<br>        jm.setObj(<span class="hljs-string">&quot;发送成功&quot;</span>);<br>        <span class="hljs-built_in">super</span>.writeJson(jm,response);<br>        <span class="hljs-comment">//**** 通知 用户端  或者  客服端  刷新消息了</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;user&quot;</span>.equals(name))&#123;<br>            <span class="hljs-type">userEchoServer</span> <span class="hljs-variable">userEchoServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">userEchoServer</span>();<br>            userEchoServer.send(<span class="hljs-string">&quot;我是用户端，你好&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">adminEchoServer</span> <span class="hljs-variable">adminEchoServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">adminEchoServer</span>();<br>            adminEchoServer.send(<span class="hljs-string">&quot;我是客服端，你好&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//从redis数据库 中  获取聊天内容</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        <span class="hljs-comment">//连接redis</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">// 获取有序集合的全部成员</span><br>        Set&lt;Tuple&gt; sortedSetMembers  =  jedis.zrangeWithScores(<span class="hljs-string">&quot;content_websocket&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 打印输出每个成员及其分数</span><br>        List&lt;WebSocket&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Tuple member : sortedSetMembers) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">memberValue</span> <span class="hljs-operator">=</span> member.getElement(); <span class="hljs-comment">// 内容</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) member.getScore();    <span class="hljs-comment">// 时间戳</span><br>            String[] parts = memberValue.split(<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-type">WebSocket</span> <span class="hljs-variable">webSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>();<br>            <span class="hljs-keyword">if</span> (parts[<span class="hljs-number">0</span>]==<span class="hljs-literal">null</span> || parts[<span class="hljs-number">1</span>]==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            webSocket.setName(parts[<span class="hljs-number">0</span>]);<span class="hljs-comment">//姓名</span><br>            webSocket.setContent(parts[<span class="hljs-number">1</span>]);<span class="hljs-comment">//内容</span><br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(score*<span class="hljs-number">1000</span>);<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> sdf.format(date);<br>            webSocket.setTimestamp(timestamp);<span class="hljs-comment">//时间</span><br>            list.add(webSocket);<br>        &#125;<br>        jm.setCode(<span class="hljs-number">1</span>);<br>        jm.setObj(list);<br>        <span class="hljs-built_in">super</span>.writeJson(jm,response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前后端交互工具类："><a href="#前后端交互工具类：" class="headerlink" title="前后端交互工具类："></a>前后端交互工具类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;op&quot;</span>); <span class="hljs-comment">//op=regFile</span><br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>(); <span class="hljs-comment">//用来保存要运行后的信息  并  返回到前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(op)) &#123;<br>                <span class="hljs-comment">// out.println( &quot;&#123;code:0,error:&#x27;没有op参数&#x27;&#125;&quot;  );</span><br>                jm.setCode(<span class="hljs-number">0</span>);<br>                jm.setError(<span class="hljs-string">&quot;op参数不能为空..&quot;</span>);<br>                writeJson(jm,resp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">///        反 射</span><br>            Method[] methods  = <span class="hljs-built_in">this</span>.getClass().getDeclaredMethods();<span class="hljs-comment">//取子类中的方法</span><br>            <span class="hljs-keyword">for</span> (Method m:methods)&#123;<br>                <span class="hljs-keyword">if</span> (  m.getName().equals(  op  )  ) &#123;  <span class="hljs-comment">// 判断有没有 regFile方法</span><br>                    m.invoke(<span class="hljs-built_in">this</span>, req,  resp);<span class="hljs-comment">//激活对应函数  regFile</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            jm.setCode(<span class="hljs-number">0</span>);<br>            jm.setError(  e.getMessage()  );<br>            writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);  <span class="hljs-comment">// 响应流的编码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-built_in">super</span>.service(req, resp);<br>    &#125;<br><br>    <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(  JsonModel jm , HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        out.println(  g.toJson(  jm  )); <span class="hljs-comment">///后端 把 运行情况 以json类型传出到前端</span><br>        out.flush();<br>        out.close();<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObj</span><span class="hljs-params">(Object obj, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span>resp.getWriter();<br>        <span class="hljs-comment">//创建一个Gson对象 g，</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-comment">//      用于将Java对象转换为JSON格式的字符串</span><br>        out.print(g.toJson(     obj      ));<br>        out.flush();<br>        out.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="聊天内容封装类："><a href="#聊天内容封装类：" class="headerlink" title="聊天内容封装类："></a>聊天内容封装类：</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSocket</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;   <span class="hljs-comment">//判断是管理员还是用户 admin/user</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> timestamp;<span class="hljs-comment">//时间戳</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> content;<span class="hljs-comment">//聊天内容</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前后端交互封装类："><a href="#前后端交互封装类：" class="headerlink" title="前后端交互封装类："></a>前后端交互封装类：</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonModel</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;  <span class="hljs-comment">//响应码  ：  0：表示失败  1：表示成功</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="源码链接-https-gitee-com-xinqiuuu-websocket-git"><a href="#源码链接-https-gitee-com-xinqiuuu-websocket-git" class="headerlink" title="源码链接:https://gitee.com/xinqiuuu/websocket.git"></a>源码链接:<a href="https://gitee.com/xinqiuuu/websocket.git">https://gitee.com/xinqiuuu/websocket.git</a></h5>]]></content>
    
    
    <categories>
      
      <category>实时通讯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
      <tag>axios</tag>
      
      <tag>servlet</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
