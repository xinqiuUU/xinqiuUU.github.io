<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阿里云滑动验证码</title>
    <link href="/2024/09/12/%E9%98%BF%E9%87%8C%E4%BA%91%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2024/09/12/%E9%98%BF%E9%87%8C%E4%BA%91%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云滑动验证码"><a href="#阿里云滑动验证码" class="headerlink" title="阿里云滑动验证码"></a>阿里云滑动验证码</h1><h2 id="前端-H5、Javascript"><a href="#前端-H5、Javascript" class="headerlink" title="前端  H5、Javascript"></a>前端  H5、Javascript</h2><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>人机验证<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--// 客户端body中的代码--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;space-semantic&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;embed-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>弹出式<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;embed-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username-embed&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;biz-input&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password-embed&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;biz-input&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--            //预留的验证码页面元素，用于配置初始化函数中的element参数--&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;captcha-element&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-btn&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--// 1.集成主JS--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://o.alicdn.com/captcha-frontend/aliyunCaptcha/AliyunCaptcha.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--// 2.新建一个&lt;script&gt;标签，用于调用验证码初始化函数initAliyunCaptcha--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> captcha;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 弹出式</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">initAliyunCaptcha</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">SceneId</span>: <span class="hljs-string">&#x27;场景ID&#x27;</span>, <span class="hljs-comment">// 场景ID。根据步骤二新建验证场景后，您可以在验证码场景列表，获取该场景的场景ID</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;身份标&#x27;</span>, <span class="hljs-comment">// 身份标。开通阿里云验证码2.0后，您可以在控制台概览页面的实例基本信息卡片区域，获取身份标</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;popup&#x27;</span>, <span class="hljs-comment">// 验证码模式。popup表示要集成的验证码模式为弹出式。无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#captcha-element&#x27;</span>, <span class="hljs-comment">//页面上预留的渲染验证码的元素，与原代码中预留的页面元素保持一致。</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">button</span>: <span class="hljs-string">&#x27;#button&#x27;</span>, <span class="hljs-comment">// 触发验证码弹窗的元素。button表示单击登录按钮后，触发captchaVerifyCallback函数。您可以根据实际使用的元素修改element的值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">captchaVerifyCallback</span>: captchaVerifyCallback, <span class="hljs-comment">// 业务请求(带验证码校验)回调函数，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">onBizResultCallback</span>: onBizResultCallback, <span class="hljs-comment">// 业务请求结果回调函数，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">getInstance</span>: getInstance, <span class="hljs-comment">// 绑定验证码实例函数，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">slideStyle</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">width</span>: <span class="hljs-number">360</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">height</span>: <span class="hljs-number">40</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-comment">// 滑块验证码样式，支持自定义宽度和高度，单位为px。其中，width最小值为320 px</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;cn&#x27;</span>, <span class="hljs-comment">// 验证码语言类型，支持简体中文（cn）、繁体中文（tw）、英文（en）</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">region</span>: <span class="hljs-string">&#x27;cn&#x27;</span> <span class="hljs-comment">//验证码示例所属地区，支持中国内地（cn）、新加坡（sgp）</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 绑定验证码实例函数。该函数为固定写法，无需修改</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInstance</span>(<span class="hljs-params">instance</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        captcha = instance;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 业务请求(带验证码校验)回调函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * <span class="hljs-doctag">@name</span> <span class="hljs-variable">captchaVerifyCallback</span></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * <span class="hljs-doctag">@function</span></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * 请求参数：由验证码脚本回调的验证参数，不需要做任何处理，直接传给服务端即可</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * <span class="hljs-doctag">@params</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">captchaVerifyParam</span></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * 返回参数：字段名固定，captchaResult为必选；如无业务验证场景时，bizResult为可选</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     // * <span class="hljs-doctag">@returns</span> </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">captchaResult:</span> boolean, bizResult?: boolean|<span class="hljs-literal">undefined</span>&#125;&#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     */</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">captchaVerifyCallback</span>(<span class="hljs-params">captchaVerifyParam</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1.向后端发起业务请求，获取验证码验证结果和业务结果</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// const result = await fetch(&#x27;yzm.action?op=regYzm&#x27;, &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     captchaVerifyParam: captchaVerifyParam, // 验证码参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     // yourBizParam... // 业务参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     name: username,</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 构建请求体</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;captchaVerifyParam&#x27;</span>, captchaVerifyParam);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;captchaVerifyParam&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 发起 POST 请求</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;yzm.action?op=regYzm&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">body</span>: formData</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">NewResult</span> = <span class="hljs-keyword">await</span> result.<span class="hljs-title function_">json</span>(); <span class="hljs-comment">//将响应体解析为 JSON 格式</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2.构造标准返回参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> verifyResult = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">captchaResult</span>: <span class="hljs-title class_">NewResult</span>.<span class="hljs-property">code</span> <span class="hljs-comment">// 验证码验证是否通过，boolean类型，必选</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// bizResult: true, // 业务验证是否通过，boolean类型，可选；若为无业务验证结果的场景，bizResult可以为空</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> verifyResult;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 业务请求验证结果回调函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onBizResultCallback</span>(<span class="hljs-params">bizResult</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (bizResult === <span class="hljs-literal">true</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 如果业务验证通过，跳转到对应页面。此处以跳转到https://www.aliyun.com/页面为例</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// window.location.href = &#x27;https://www.aliyun.com/&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;666&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 如果业务验证不通过，给出不通过提示。此处不通过提示为业务验证不通过！</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;业务验证不通过！&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="后端-Servlet-接收（使用容器-Apache-Tomcat）"><a href="#后端-Servlet-接收（使用容器-Apache-Tomcat）" class="headerlink" title="后端 Servlet 接收（使用容器 Apache Tomcat）"></a>后端 Servlet 接收（使用容器 Apache Tomcat）</h2><h3 id="1-对前端传来的数据进行验证"><a href="#1-对前端传来的数据进行验证" class="headerlink" title="1.对前端传来的数据进行验证"></a>1.对前端传来的数据进行验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.captcha20230305.models.VerifyCaptchaRequest;<br><span class="hljs-keyword">import</span> com.aliyun.captcha20230305.models.VerifyCaptchaResponse;<br><span class="hljs-keyword">import</span> com.aliyun.tea.TeaException;<br><span class="hljs-keyword">import</span> com.aliyun.teaopenapi.models.Config;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><br><span class="hljs-meta">@WebServlet(value = &quot;/yzm.action&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">yzmServletTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span> &#123;<br>    String captchaVerifyParam;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regYzm</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        <span class="hljs-comment">// 从请求体中获取参数  字节输入流  *****其它方法获取不到信息****</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> req.getReader() ) &#123;<br>            String line;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!line.isEmpty()) &#123; <span class="hljs-comment">// 跳过空行</span><br><span class="hljs-comment">//                    System.out.println(&quot;第&quot;+(flag++)+&quot;行line:&quot;+line);</span><br>                    <span class="hljs-comment">//具体验证信息参数</span><br>                    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">3</span>)&#123;<br>                        <span class="hljs-comment">//获取验证数据</span><br>                        captchaVerifyParam = line ;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    flag++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;captchaVerifyParam:&quot;</span>+captchaVerifyParam);<br>        <span class="hljs-comment">// ====================== 1. 初始化配置 ======================</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-comment">// 设置您的AccessKey ID 和 AccessKey Secret。</span><br>        <span class="hljs-comment">// getEnvProperty只是个示例方法，需要您自己实现AccessKey ID 和 AccessKey Secret安全的获取方式。</span><br>        config.accessKeyId = <span class="hljs-string">&quot;自己的AccessKey ID&quot;</span>;<br>        config.accessKeySecret = <span class="hljs-string">&quot;自己的AccessKey Secret&quot;</span>;<br>        <span class="hljs-comment">//设置请求地址</span><br>        config.endpoint = <span class="hljs-string">&quot;captcha.cn-shanghai.aliyuncs.com&quot;</span>;<br>        <span class="hljs-comment">// 设置连接超时为5000毫秒</span><br>        config.connectTimeout = <span class="hljs-number">5000</span>;<br>        <span class="hljs-comment">// 设置读超时为5000毫秒</span><br>        config.readTimeout = <span class="hljs-number">5000</span>;<br>        <span class="hljs-comment">// ====================== 2. 初始化客户端（实际生产代码中建议复用client） ======================</span><br>        com.aliyun.captcha20230305.<span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.aliyun.captcha20230305.Client(config);<br>        <span class="hljs-comment">// 创建APi请求</span><br>        <span class="hljs-type">VerifyCaptchaRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerifyCaptchaRequest</span>();<br>        request.captchaVerifyParam = captchaVerifyParam;<br>        <span class="hljs-comment">//对前端传来的数据  进行  验证    得到验证结果</span><br>        <span class="hljs-type">VerifyCaptchaResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.verifyCaptcha(request);<br>        <span class="hljs-comment">// ====================== 3. 发起请求） ======================</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 建议使用您系统中的日志组件，打印返回</span><br>            <span class="hljs-comment">// 获取验证码验证结果（请注意判空），将结果返回给前端。出现异常建议认为验证通过，优先保证业务可用，然后尽快排查异常原因。</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">captchaVerifyResult</span> <span class="hljs-operator">=</span> response.body.result.verifyResult; <span class="hljs-comment">//验证结果  true为通过，false为不通过</span><br>            jm.setCode(captchaVerifyResult); <span class="hljs-comment">//  验证  结果  true为通过，false为不通过</span><br>            System.out.println(<span class="hljs-string">&quot;I an person:&quot;</span>+captchaVerifyResult);<br>            System.out.println(response.body.getCode()); <span class="hljs-comment">// 表示验证情况  Success</span><br>        &#125; <span class="hljs-keyword">catch</span> (TeaException error) &#123;<br>            <span class="hljs-comment">// 建议使用您系统中的日志组件，打印异常</span><br>            <span class="hljs-comment">// 出现异常建议认为验证通过，优先保证业务可用，然后尽快排查异常原因。</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">captchaVerifyResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            jm.setCode(captchaVerifyResult);<br>            jm.setError(response.body.getCode()); <span class="hljs-comment">//错误信息</span><br>            System.out.println(<span class="hljs-string">&quot;Error message:&quot;</span>+jm.getError());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception _error) &#123;<br>            <span class="hljs-type">TeaException</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeaException</span>(_error.getMessage(), _error);<br>            <span class="hljs-comment">// 建议使用您系统中的日志组件，打印异常</span><br>            <span class="hljs-comment">// 出现异常建议认为验证通过，优先保证业务可用，然后尽快排查异常原因。</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">captchaVerifyResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            jm.setCode(captchaVerifyResult);<br>            jm.setError(response.body.getCode()); <span class="hljs-comment">//错误信息</span><br>            System.out.println(<span class="hljs-string">&quot;Error message:&quot;</span>+jm.getError());<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-对验证结果返回前端"><a href="#2-对验证结果返回前端" class="headerlink" title="2.对验证结果返回前端"></a>2.对验证结果返回前端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;op&quot;</span>); <span class="hljs-comment">//op=regFile</span><br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>(); <span class="hljs-comment">//用来保存要运行后的信息  并  返回到前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(op)) &#123;<br>                <span class="hljs-comment">// out.println( &quot;&#123;code:0,error:&#x27;没有op参数&#x27;&#125;&quot;  );</span><br>                jm.setError(<span class="hljs-string">&quot;op参数不能为空..&quot;</span>);<br>                writeJson(jm,resp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">///        反 射</span><br>            Method[] methods  = <span class="hljs-built_in">this</span>.getClass().getDeclaredMethods();<span class="hljs-comment">//取子类中的方法</span><br>            <span class="hljs-keyword">for</span> (Method m:methods)&#123;<br>                <span class="hljs-keyword">if</span> (  m.getName().equals(  op  )  ) &#123;  <span class="hljs-comment">// 判断有没有 regFile方法</span><br>                    m.invoke(<span class="hljs-built_in">this</span>, req,  resp);<span class="hljs-comment">//激活对应函数  regFile</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            jm.setError(  e.getMessage()  );<br>            writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);  <span class="hljs-comment">// 响应流的编码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-built_in">super</span>.service(req, resp);<br>    &#125;<br><br>    <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(  JsonModel jm , HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        out.println(  g.toJson(  jm  )); <span class="hljs-comment">///后端 把 运行情况 以json类型传出到前端</span><br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="保存后端情况类"><a href="#保存后端情况类" class="headerlink" title="保存后端情况类"></a>保存后端情况类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonModel</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-keyword">private</span> boolean code;  <span class="hljs-comment">//响应码  ：  0：表示失败  1：表示成功</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> error;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>人机验证</category>
      
    </categories>
    
    
    <tags>
      
      <tag>servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端-后端交互</title>
    <link href="/2024/09/12/%E5%89%8D%E7%AB%AF-%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2024/09/12/%E5%89%8D%E7%AB%AF-%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h1 id="前端-后端交互（文件从前端上传阿里云OSS）"><a href="#前端-后端交互（文件从前端上传阿里云OSS）" class="headerlink" title="前端-后端交互（文件从前端上传阿里云OSS）"></a>前端-后端交互（文件从前端上传阿里云OSS）</h1><h2 id="前端fetch-发送-HTTP-请求："><a href="#前端fetch-发送-HTTP-请求：" class="headerlink" title="前端fetch 发送 HTTP 请求："></a>前端<code>fetch</code> 发送 HTTP 请求：</h2><h3 id="ES8中提供的新的异步API操作-，fetch，await-async："><a href="#ES8中提供的新的异步API操作-，fetch，await-async：" class="headerlink" title="ES8中提供的新的异步API操作 ，fetch，await async："></a>ES8中提供的新的异步API操作 ，fetch，await async：</h3><p>​在ES8 (ECMAScript 2017) 中，引入了 <code>async</code> 和 <code>await</code> 关键字，这是JavaScript中处理异步操作的一种新方法。这两个关键字旨在简化使用承诺（promises）执行异步操作时的语法。它们帮助开发者以一种更接近同步编程的方式来编写异步代码，从而提高代码的可读性和维护性。</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p><code>async</code> 函数是一种特殊类型的函数，用于定义异步函数，它始终返回一个 <code>Promise</code> 对象。<code>async</code> 函数内部可以使用 <code>await</code> 表达式，这有助于暂停函数的执行，直到等待的 <code>Promise</code> 解决</p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p><code>await</code> 关键字用于等待 <code>Promise</code> 解决，并暂停 <code>async</code> 函数的执行，直到 <code>Promise</code> 完成（resolved）。使用 <code>await</code> 可以以一种更线性、更同步的方式编写异步代码，从而避免回调地狱。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基于fetch的上传图片、文件到OSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> file =$(<span class="hljs-string">&quot;file&quot;</span>).<span class="hljs-property">files</span>; <span class="hljs-comment">//同名的file元素有多个</span></span><br><span class="language-javascript">            <span class="hljs-comment">//具体流程 第一步</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> formData=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(); <span class="hljs-comment">// 表示以表单形式构建参数</span></span><br><span class="language-javascript">            <span class="hljs-comment">// formData.append( &quot;file&quot;, file);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; file.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>+i, file[i]); <span class="hljs-comment">// 将文件对象添加到 formData 中</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 第四步 向后端传数据  ， 提交数据到后端</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> <span class="hljs-title function_">postData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url, data</span>) =&gt; &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-comment">//参数 ： 因为有图片，文件，所以不能以json格式传数据</span></span><br><span class="language-javascript">                        <span class="hljs-attr">body</span>: data</span><br><span class="language-javascript">                    &#125;);</span><br><span class="language-javascript">                    <span class="hljs-comment">// 前后端关键地方  前后端分隔的地方  暂停  等后端处理完前端传的数据  接收来自后端的数据  返回出去</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>(); <span class="hljs-comment">//将响应体解析为 JSON 格式</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//此result是一个包含了jsonmodel的promise对象</span></span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error sending POST request:&#x27;</span>, error);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            <span class="hljs-comment">//第二步   设置要调的Servlet 并传一个op判断调用的方法</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> apiUrl = <span class="hljs-string">&#x27;FileToOSSText.action?op=regFile&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//第三步   传递参数</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> pro = <span class="hljs-title function_">postData</span>( apiUrl , formData ); <span class="hljs-comment">//pro就是执行后的promise对象</span></span><br><span class="language-javascript">            <span class="hljs-comment">//第五步   接收后端数据  进行判断</span></span><br><span class="language-javascript">            pro.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">jsonobj</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (jsonobj.<span class="hljs-property">code</span> == <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;resultdiv&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;b&gt;文件上传成功&lt;/b&gt; &lt;br /&gt;链接地址:&quot;</span>+jsonobj.<span class="hljs-property">obj</span>;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&#x27;myImg&#x27;</span>).<span class="hljs-property">src</span>=jsonobj.<span class="hljs-property">obj</span> ;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;resultdiv&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;b&gt;文件上传失败&lt;/b&gt; 原因:&quot;</span> + jsonobj.<span class="hljs-property">error</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    选择需要上传的文件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reg()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultdiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>如果是图片则显示在下面:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span><span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后端Servlet-接收（使用容器-Apache-Tomcat）"><a href="#后端Servlet-接收（使用容器-Apache-Tomcat）" class="headerlink" title="后端Servlet 接收（使用容器 Apache Tomcat）"></a>后端Servlet 接收（使用容器 Apache Tomcat）</h2><h3 id="Java-Servlet"><a href="#Java-Servlet" class="headerlink" title="Java Servlet"></a><strong>Java Servlet</strong></h3><p>Java Servlet 是 Java EE 规范中的一部分，用于处理 Web 请求和响应。你可以编写自己的 Servlet 类来处理来自前端的 HTTP 请求，然后部署到 Servlet 容器（如 Apache Tomcat 或者 Jetty）中运行。</p><h3 id="1-接收前端发来的请求，调用doGet-方法，激活regFile-函数"><a href="#1-接收前端发来的请求，调用doGet-方法，激活regFile-函数" class="headerlink" title="1 接收前端发来的请求，调用doGet()方法，激活regFile()函数"></a>1 接收前端发来的请求，调用doGet()方法，激活regFile()函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.yc.Servlet.JsonModel;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;op&quot;</span>); <span class="hljs-comment">//取值 op=regFile</span><br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>(); <span class="hljs-comment">//用来保存要运行后的信息  并  返回到前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(op)) &#123;<br>                <span class="hljs-comment">// out.println( &quot;&#123;code:0,error:&#x27;没有op参数&#x27;&#125;&quot;  );</span><br>                jm.setCode(<span class="hljs-number">0</span>);<br>                jm.setError(<span class="hljs-string">&quot;op参数不能为空..&quot;</span>);<br>                writeJson(jm,resp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">///        反 射</span><br>            Method[] methods  = <span class="hljs-built_in">this</span>.getClass().getDeclaredMethods();<span class="hljs-comment">//取子类中的方法</span><br>            <span class="hljs-keyword">for</span> (Method m:methods)&#123;<br>                <span class="hljs-keyword">if</span> (  m.getName().equals(  op  )  ) &#123;  <span class="hljs-comment">// 判断有没有 regFile方法</span><br>                    m.invoke(<span class="hljs-built_in">this</span>, req,  resp);<span class="hljs-comment">//激活对应函数  regFile</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            jm.setCode(<span class="hljs-number">0</span>);<br>            jm.setError(  e.getMessage()  );<br>            writeJson(jm,resp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);  <span class="hljs-comment">// 响应流的编码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-built_in">super</span>.service(req, resp);<span class="hljs-comment">//判断调用doGet()还是doPost()方法</span><br>    &#125;<br><br><span class="hljs-comment">//***** 最后要执行的函数   返回信息到前端</span><br>    <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(  JsonModel jm , HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        out.println(  g.toJson(  jm  )); <span class="hljs-comment">///后端 把 运行情况 以json类型传出到前端</span><br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-对文件进行处理，并传文件信息到上传工具"><a href="#2-对文件进行处理，并传文件信息到上传工具" class="headerlink" title="2 对文件进行处理，并传文件信息到上传工具"></a>2 对文件进行处理，并传文件信息到上传工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.yc.Servlet.JsonModel;<br><span class="hljs-keyword">import</span> com.yc.utils.BaseServlet;<br><span class="hljs-keyword">import</span> com.yc.utils.UploadToOSS;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.MultipartConfig;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.Part;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@WebServlet(&quot;/FileToOSSText.action&quot;)</span><br><span class="hljs-meta">@MultipartConfig(fileSizeThreshold = 1024*1024 , maxFileSize = 1024*1024*5 , maxRequestSize = 1024*1024*5*5)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileToOSSText</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regFile</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">JsonModel</span> <span class="hljs-variable">jm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonModel</span>();<br>        Collection&lt;Part&gt; parts = req.getParts(); <span class="hljs-comment">// 获取所有部分</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (Part part : parts) &#123;<br>                <span class="hljs-keyword">if</span> (part.getContentType() != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 检查部分是否为文件</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> part.getSubmittedFileName(); <span class="hljs-comment">// 获取文件名</span><br>                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">fileContent</span> <span class="hljs-operator">=</span> part.getInputStream(); <span class="hljs-comment">// 获取文件内容的输入流</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> UploadToOSS.uploadFileOSS( fileName ,  fileContent );<span class="hljs-comment">//调用上传到OSS的函数</span><br>                    <span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;0&quot;</span>.equals(url) )&#123;  <span class="hljs-comment">//上传失败</span><br>                        jm.setCode(<span class="hljs-number">0</span>);<br>                        jm.setError(<span class="hljs-string">&quot;上传失败。。。&quot;</span>);<br>                        <span class="hljs-built_in">super</span>.writeJson( jm , resp );<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;     <span class="hljs-comment">//上传成功</span><br>                        jm.setObj(url);<br>                        jm.setCode(<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(ex);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.writeJson(jm,resp);<br>            System.out.println(<span class="hljs-string">&quot;OSS close Success&quot;</span>);<br>            UploadToOSS.close(); <span class="hljs-comment">// 最终，无论上传成功还是失败，都关闭OSS客户端实例以释放资源。</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-上传文件到阿里云OSS，并返回URL-访问域名"><a href="#3-上传文件到阿里云OSS，并返回URL-访问域名" class="headerlink" title="3 上传文件到阿里云OSS，并返回URL(访问域名)"></a>3 上传文件到阿里云OSS，并返回URL(访问域名)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> com.aliyun.oss.common.auth.CredentialsProviderFactory;<br><span class="hljs-keyword">import</span> com.aliyun.oss.common.auth.EnvironmentVariableCredentialsProvider;<br><span class="hljs-keyword">import</span> com.aliyuncs.exceptions.ClientException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadToOSS</span> &#123;<br><br><span class="hljs-comment">//OSS客户端实例</span><br>    <span class="hljs-keyword">static</span>  <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uploadFileOSS</span><span class="hljs-params">(String fileKey, InputStream inputStream)</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>        <span class="hljs-comment">// 阿里云OSS服务的Endpoint。  服务的访问域名，指定了阿里云OSS服务的网络节点</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://oss-cn-beijing.aliyuncs.com&quot;</span>;<br>        <span class="hljs-comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。</span><br>        <span class="hljs-type">EnvironmentVariableCredentialsProvider</span> <span class="hljs-variable">credentialsProvider</span> <span class="hljs-operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();<br>        <span class="hljs-comment">// 你的阿里云OSS存储桶名称。填写Bucket名称，</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xin-qiu&quot;</span>;<br>        <span class="hljs-comment">// OSS中的文件键（Key），即上传后的文件名。</span><br><span class="hljs-comment">//        String fileKey = &quot;qqq.jpg&quot;; // 保存到OSS的文件名</span><br>        <span class="hljs-comment">// 本地系统中的文件路径，用于找到你想上传的文件。</span><br><span class="hljs-comment">//        String filePath = &quot;C:/Users/DELL/OneDrive/桌面/图片/二次元/qqq.jpg&quot;; // 本地文件路径</span><br><br>        <span class="hljs-comment">// 使用OSSClientBuilder构建一个OSS客户端实例。</span><br>        ossClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint,credentialsProvider);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个文件输入流，用于读取本地文件。</span><br><span class="hljs-comment">//            FileInputStream inputStream = new FileInputStream(filePath);</span><br>            <span class="hljs-comment">// 调用OSS客户端的putObject方法上传文件。传入存储桶名、文件键和文件输入流。</span><br>            ossClient.putObject(bucketName, fileKey, inputStream);<br>            System.out.println(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>            <span class="hljs-comment">//返回出去并保存到数据库 ： https://xin-qiu.oss-cn-beijing.aliyuncs.com/cx.png</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;https:/xin-qiu.oss-cn-beijing.aliyuncs.com/&quot;</span>+fileKey;<span class="hljs-comment">//上传成功 把 访问域名返回出去</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件未找到：&quot;</span> + e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;  <span class="hljs-comment">//失败返回 0</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 最终，无论上传成功还是失败，都关闭OSS客户端实例以释放资源。</span><br>        ossClient.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-最后调用BaseServlet类中的-writeJson-函数把结果以json格式传到前端"><a href="#4-最后调用BaseServlet类中的-writeJson-函数把结果以json格式传到前端" class="headerlink" title="4 最后调用BaseServlet类中的 writeJson() 函数把结果以json格式传到前端"></a>4 最后调用BaseServlet类中的 writeJson() 函数把结果以json格式传到前端</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//***** 最后要执行的函数   返回信息到前端</span><br>   <span class="hljs-comment">//*** 后端传数据到前端  关键地方   ***    以json格式传数据到前端</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeJson</span>(<span class="hljs-params">  JsonModel jm , HttpServletResponse resp</span>) throws IOException</span> &#123;<br>       resp.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>       PrintWriter <span class="hljs-keyword">out</span> = resp.getWriter();<br>       Gson g = <span class="hljs-keyword">new</span> Gson();<br>       <span class="hljs-keyword">out</span>.println(  g.toJson(  jm  )); <span class="hljs-comment"><span class="hljs-doctag">///</span>后端 把 运行情况 以json类型传出到前端</span><br>       <span class="hljs-keyword">out</span>.flush();<br>       <span class="hljs-keyword">out</span>.close();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="保存运行情况类"><a href="#保存运行情况类" class="headerlink" title="保存运行情况类"></a>保存运行情况类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonModel</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;  <span class="hljs-comment">//响应码  ：  0：表示失败  1：表示成功</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> error;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.80<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端交互</category>
      
    </categories>
    
    
    <tags>
      
      <tag>servlet、OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2024/09/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="策略模式（案例：四则运算-）"><a href="#策略模式（案例：四则运算-）" class="headerlink" title="策略模式（案例：四则运算 +  -  *  &#x2F;  ）"></a>策略模式（案例：四则运算 +  -  *  &#x2F;  ）</h2><p>​策略模式（Strategy Pattern）是一种行为设计模式，用来定义一系列的算法，把它们一个个封装起来，并使它们可以相互替换。该模式使得算法可以独立于使用它的客户端而变化，也即算法可以独立于它们的上下文进行变化。策略模式是一种很常用的设计模式，广泛应用于需要从多种算法或业务规则中选择一种算法或规则的系统中。</p><h3 id="目的和优势："><a href="#目的和优势：" class="headerlink" title="目的和优势："></a>目的和优势：</h3><ol><li><strong>封装变化</strong>：将算法的变化封装在各个策略类中，而不是在使用算法的环境中。</li><li><strong>避免使用多重条件选择语句</strong>：策略模式提供了一种用条件语句选择所需算法的替代方法。</li><li><strong>易于扩展</strong>：添加一个新的策略只需实现一个接口即可，无需修改现有代码。</li><li><strong>符合开闭原则</strong>：系统可以在不修改原有代码的情况下引入新的算法。</li></ol><h3 id="结构组成："><a href="#结构组成：" class="headerlink" title="结构组成："></a>结构组成：</h3><p>策略模式主要包括三个角色：</p><ol><li><strong>环境类（Context）</strong>：用来操作策略的上下文环境，它是客户端使用策略的入口。</li><li><strong>抽象策略类（Strategy Interface）</strong>：定义所有支持的算法的公共接口。Context使用这个接口来调用某个Concrete Strategy定义的算法。</li><li><strong>具体策略类（Concrete Strategy）</strong>：实现策略接口，提供具体的算法实现。</li></ol><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ol><li><strong>需要在运行时选择算法的行为</strong>：当系统需要根据不同的情况使用不同的算法时，可以使用策略模式。例如，根据不同的支付方式选择不同的支付策略。</li><li><strong>避免使用大量的条件语句</strong>：如果在代码中使用大量的条件语句来选择不同的行为，可以考虑使用策略模式。策略模式可以将每种行为封装在单独的策略对象中，从而简化代码并提高可读性。</li><li><strong>算法的实现可能频繁变化</strong>：如果系统中的算法实现可能经常变化，而且这种变化不希望影响到客户端代码，可以使用策略模式。策略模式将算法的实现与客户端代码分离，使得可以轻松地添加、删除或替换策略而不影响客户端代码。</li><li><strong>需要通过继承或组合来扩展算法的行为</strong>：策略模式可以通过继承或组合来扩展算法的行为。通过定义新的策略对象，可以轻松地添加新的行为，而不影响现有的代码。</li></ol><p>总之，策略模式适用于需要在运行时选择算法的行为，并且希望通过封装算法和消除大量的条件语句来提高代码的可读性和可维护性的情况。</p><h4 id="抽象策略类："><a href="#抽象策略类：" class="headerlink" title="抽象策略类："></a>抽象策略类：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 抽象策略类</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br>     <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doOperation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>; <span class="hljs-comment">//算法的具体实现</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="具体策略类："><a href="#具体策略类：" class="headerlink" title="具体策略类："></a>具体策略类：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//加法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">addOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    int doOperation(int x,int y) &#123;<br>        <span class="hljs-keyword">return</span> x+y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//减法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">subOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x-y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//乘法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mulOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x*y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//除法运算</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">divOperationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    double doOperation(double x, double y) &#123;<br>        <span class="hljs-keyword">return</span> x/y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环境类："><a href="#环境类：" class="headerlink" title="环境类："></a>环境类：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//环境类  保存具体策略类的具体实例 并  提供一个方法调用具体策略的具体算法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationContext</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  Operation strategy; <span class="hljs-comment">//保存具体策略</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> x;  <span class="hljs-comment">//要进行运算的参数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> y;<span class="hljs-comment">//要进行运算的参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperationContext</span><span class="hljs-params">(Operation strategy,<span class="hljs-keyword">double</span> x,<span class="hljs-keyword">double</span> y)</span> </span>&#123;  <span class="hljs-comment">//构造方法</span><br>        <span class="hljs-keyword">this</span>.strategy = strategy;<br>        <span class="hljs-keyword">this</span>.x=x;<br>        <span class="hljs-keyword">this</span>.y=y;<br>    &#125;<br>    <span class="hljs-comment">//返回计算后的结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">executeOperation</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> strategy.<span class="hljs-title">doOperation</span><span class="hljs-params">(x,y)</span></span>;  <span class="hljs-comment">//策略中的具体算法，对数据进行具体计算</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端使用："><a href="#客户端使用：" class="headerlink" title="客户端使用："></a>客户端使用：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">app</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br><br>        OperationContext context;<br>        <span class="hljs-comment">//启用加法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> addOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;加法:x+y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到减法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> subOperationStrategy(),<span class="hljs-number">8.0</span>,<span class="hljs-number">4.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;减法:x-y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到乘法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> mulOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;乘法:x*y=&quot;</span>+context.executeOperation());<br>        <span class="hljs-comment">//切换到除法算法</span><br>        context = <span class="hljs-keyword">new</span> OperationContext(<span class="hljs-keyword">new</span> divOperationStrategy(),<span class="hljs-number">5.0</span>,<span class="hljs-number">5.0</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;除法:x/y=&quot;</span>+context.executeOperation());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>职责链模式</title>
    <link href="/2024/09/11/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AF%B7%E5%81%87%E5%AE%A1%E6%89%B9%E6%9D%83%E9%99%90%EF%BC%89/"/>
    <url>/2024/09/11/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AF%B7%E5%81%87%E5%AE%A1%E6%89%B9%E6%9D%83%E9%99%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="职责链模式（案例：请假审批权限：小组长-经理-…-）"><a href="#职责链模式（案例：请假审批权限：小组长-经理-…-）" class="headerlink" title="职责链模式（案例：请假审批权限：小组长-&gt;经理-&gt;….）"></a>职责链模式（案例：请假审批权限：小组长-&gt;经理-&gt;….）</h2><p>​在软件设计中，职责链模式（Chain of Responsibility Pattern）是一种行为设计模式，用于将请求的发送者和接收者解耦。在Java中实现职责链模式通常涉及创建多个处理对象（handler），这些对象构成一条链，每个处理对象都有机会处理请求或将其传递给链中的下一个对象。</p><h3 id="职责链模式的核心组成部分："><a href="#职责链模式的核心组成部分：" class="headerlink" title="职责链模式的核心组成部分："></a>职责链模式的核心组成部分：</h3><ol><li><strong>处理器接口（Handler Interface）</strong>：定义了处理请求的方法。所有的具体处理器都必须实现这个接口。</li><li><strong>具体处理器（Concrete Handlers）</strong>：实现处理器接口的类，每个类都处理它能处理的请求，并决定是否将请求传递到链上的下一个处理器。</li><li><strong>客户端（Client）</strong>：启动请求传递到职责链的起点</li></ol><h4 id="1-创建处理器"><a href="#1-创建处理器" class="headerlink" title="1. 创建处理器"></a>1. 创建处理器</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Leader</span> supirior; <span class="hljs-comment">//上级领导  即职责链</span><br><br><span class="hljs-comment">//抽象方法  请假天数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">handleRequest</span>(int days);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br><span class="hljs-comment">// 即职责链       name:本人    supirior:上级领导</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Leader</span> supirior) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">supirior</span> = supirior;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSupirior</span>(<span class="hljs-params"><span class="hljs-title class_">Leader</span> supirior</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">supirior</span> = supirior;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Leader</span> <span class="hljs-title function_">getSupirior</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> supirior;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-定义具体处理器"><a href="#2-定义具体处理器" class="headerlink" title="2. 定义具体处理器"></a>2. 定义具体处理器</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//小组长处理</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Grouper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span></span>&#123;<br>    public <span class="hljs-type">Grouper</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">//请假的具体实现</span><br>    public void handleRequest(int days) &#123;<br>        <span class="hljs-keyword">if</span>(days &lt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">System</span>.out.println( <span class="hljs-string">&quot;小组长：&quot;</span>+<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;批准请假：&quot;</span>+days+<span class="hljs-string">&quot;天！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getSupirior()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//权限不够 则推给上级领导处理</span><br>                <span class="hljs-keyword">this</span>.getSupirior().handleRequest(  days );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;请假天数超过权限&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//经理处理</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span></span>&#123;<br>    public <span class="hljs-type">Manager</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">//请假的具体实现</span><br>    public void handleRequest(int days) &#123;<br>        <span class="hljs-keyword">if</span>(days &lt;= <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">System</span>.out.println( <span class="hljs-string">&quot;经理：&quot;</span>+<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;批准请假：&quot;</span>+days+<span class="hljs-string">&quot;天！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getSupirior()!=<span class="hljs-literal">null</span>)&#123;  <span class="hljs-comment">//权限不够 则推给上级领导处理</span><br>                <span class="hljs-keyword">this</span>.getSupirior().handleRequest(  days );<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;请假天数超过权限！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-客户端使用"><a href="#3-客户端使用" class="headerlink" title="3. 客户端使用"></a>3. 客户端使用</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">//开闭原则 ： 对修改关闭   对扩展开发</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> App &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//组装职责链</span><br>        Leader grouper <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Grouper(<span class="hljs-string">&quot;小组长张三&quot;</span>);<br>        <span class="hljs-comment">//小组长上加经理</span><br>        Leader manager <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Manager(<span class="hljs-string">&quot;经理李四&quot;</span>);<br>        grouper.setSupirior(manager);<br>        <span class="hljs-comment">//经理上加总经理</span><br>        <span class="hljs-operator">/*</span><br>        Leader generalManager <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> GeneralManager(<span class="hljs-string">&quot;总经理lili&quot;</span>);<br>        manager.setSupirior(generalManager);<br><br>        <span class="hljs-comment">//总经理上加老板</span><br>        Leader boss <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> Boss(<span class="hljs-string">&quot;老板小明&quot;</span>);<br>        generalManager.setSupirior(boss);<br><span class="hljs-operator">*/</span><br><span class="hljs-comment">//请假3天</span><br>        grouper.handleRequest(<span class="hljs-number">3</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2024/09/11/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6)/"/>
    <url>/2024/09/11/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%81%E5%85%AB%E8%BF%9B%E5%88%B6%E3%80%81%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6)/</url>
    
    <content type="html"><![CDATA[<h2 id="观察者模式（案例：十进制转二进制、八进制、十六进制"><a href="#观察者模式（案例：十进制转二进制、八进制、十六进制" class="headerlink" title="观察者模式（案例：十进制转二进制、八进制、十六进制)"></a>观察者模式（案例：十进制转二进制、八进制、十六进制)</h2><p>​观察者模式是一种常用的设计模式，属于行为型模式。它允许一个对象（称为“主题”或“被观察者”）维持一系列依赖于它的对象（称为“观察者”），当主题的状态发生变化时，会自动通知所有观察者对象，使它们能够自动更新自己。</p><h3 id="观察者模式的组成："><a href="#观察者模式的组成：" class="headerlink" title="观察者模式的组成："></a>观察者模式的组成：</h3><ol><li><strong>Subject（主题）</strong> - 维护一组观察者，提供用于增加和删除观察者的方法。</li><li><strong>Observer（观察者）</strong> - 所有潜在的更新对象必须实现的接口。</li><li><strong>BinaryObserver（具体观察者，二进制）</strong> - 当接收到主题变化的通知时，执行相应的动作。</li><li><strong>OctalObserver（具体观察者，八进制）</strong> - 当接收到主题变化的通知时，执行相应的动作。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>当一个对象的改变需要同时改变其他对象，而且它不知道具体有哪些对象需要改变时。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这两者封装在独立的对象中以使它们可以各自独立地改变和复用。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//待观察的主题：  状态</span><br><span class="hljs-comment">//一旦主题中的状态发生变化， 就要通知所有观察者，你们要运行(   进制转换   )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> &#123;<br><br>    <span class="hljs-comment">//2 所有的转换器  观察的状态是state</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> state;  <span class="hljs-comment">//此属性可以是一个复杂的对象</span><br><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <span class="hljs-comment">//观察者（进制转换器）的集合</span><br><br>    <span class="hljs-comment">//1 将转换器保存到  转换器集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span>(<span class="hljs-params">Observer Observer</span>)</span>&#123;<br>        <span class="hljs-comment">//将观察者保存到集合中 （ 将观察者注册到主题中来  ）</span><br>        observers.<span class="hljs-keyword">add</span>(Observer);<br>    &#125;<br>    <span class="hljs-comment">//3 状态一发生变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> state</span>)</span>&#123;<br>        <span class="hljs-comment">//状态变化</span><br>        <span class="hljs-keyword">this</span>.state = state;<br>        <span class="hljs-comment">//通知观察者状态变了 ，请运算</span><br>        <span class="hljs-comment">//4  循环所有的转换器（观察者） ，调用转换器的转换方法 update() 输出对应的进制的值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;observers.size();i++)&#123;<br>            Observer observer = observers.<span class="hljs-keyword">get</span>(i); <span class="hljs-comment">//提取每个转换器（观察者）</span><br>            observer.update(); <span class="hljs-comment">//调用每个转换器（观察者）的转换方法</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getState</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> Subject subject;  <span class="hljs-comment">//待观察的主题</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span>; <span class="hljs-comment">//  转换方法</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pf">//二进制的转换器 （二进制的观察者）<br>public class BinaryObserver extends Observer&#123;<br><br>    public BinaryObserver(Subject subject) &#123;<br>        super.subject=subject;  //当前二进制的观察者观察了谁 （主题）<br>        subject.register( this  );//主题中也要知道谁 （观察者/转换器） 观察了自己<br>    &#125;<br><br>    @Override<br>    public void update() &#123;<br>        //转换开始 取出Subject中的<span class="hljs-keyword">state</span>，转为二进制<br>        int <span class="hljs-keyword">state</span> = super.subject.getState(); //先取出变化后的状态<br>        String str = Integer.<span class="hljs-keyword">to</span>BinaryString(<span class="hljs-keyword">state</span>);<br>        System.<span class="hljs-keyword">out</span>.println(  <span class="hljs-string">&quot;原始值：&quot;</span>+<span class="hljs-keyword">state</span>+<span class="hljs-string">&quot;转成二进制的结果为：&quot;</span>+str  );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">//八进制的转换器 （八进制的观察者）<br>public class OctalObserver extends Observer&#123;<br>    public OctalObserver(Subject subject) &#123;<br>        super.subject=subject;  //当前八进制的观察者观察了谁 （主题）<br>        subject.register( this  );//主题中也要知道谁 （观察者/转换器） 观察了自己<br>    &#125;<br><br>    @Override<br>    public void update() &#123;<br>        //转换开始 取出Subject中的<span class="hljs-keyword">state</span>，转为八进制<br>        int <span class="hljs-keyword">state</span> = super.subject.getState(); //先取出变化后的状态<br>        String str = Integer.<span class="hljs-keyword">to</span>OctalString( <span class="hljs-keyword">state</span> );<br>        System.<span class="hljs-keyword">out</span>.println(  <span class="hljs-string">&quot;原始值：&quot;</span>+<span class="hljs-keyword">state</span>+<span class="hljs-string">&quot;转成八进制的结果为：&quot;</span>+str  );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">//1 带观察者的主题</span><br>        <span class="hljs-title class_">Subject</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br><br>        <span class="hljs-comment">//2 创建一些观察者（转换器） 并注册这些观察者到主题中</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">OctalObserver</span>(  subject  );<span class="hljs-comment">//八进制</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryObserver</span>(  subject  );<span class="hljs-comment">//二进制</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HexObserver</span>( subject ); <span class="hljs-comment">//十六进制</span><br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;更改状态值：&quot;</span>);<br>        subject.<span class="hljs-title function_">setState</span>(  <span class="hljs-number">10</span>  );<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
